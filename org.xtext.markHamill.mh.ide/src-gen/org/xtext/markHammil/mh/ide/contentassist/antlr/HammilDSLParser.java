/*
 * generated by Xtext 2.12.0
 */
package org.xtext.markHammil.mh.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.markHammil.mh.ide.contentassist.antlr.internal.InternalHammilDSLParser;
import org.xtext.markHammil.mh.services.HammilDSLGrammarAccess;

public class HammilDSLParser extends AbstractContentAssistParser {

	@Inject
	private HammilDSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalHammilDSLParser createParser() {
		InternalHammilDSLParser result = new InternalHammilDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives_0(), "rule__Expression__Alternatives_0");
					put(grammarAccess.getTextExpressionAccess().getAlternatives(), "rule__TextExpression__Alternatives");
					put(grammarAccess.getHorizontalExpressionAccess().getAlternatives(), "rule__HorizontalExpression__Alternatives");
					put(grammarAccess.getCodeExpressionAccess().getAlternatives(), "rule__CodeExpression__Alternatives");
					put(grammarAccess.getHeaderDepth1ExpressionAccess().getAlternatives(), "rule__HeaderDepth1Expression__Alternatives");
					put(grammarAccess.getHeaderDepth2ExpressionAccess().getAlternatives(), "rule__HeaderDepth2Expression__Alternatives");
					put(grammarAccess.getFileAccess().getGroup(), "rule__File__Group__0");
					put(grammarAccess.getHorizontalExpressionAccess().getGroup_0(), "rule__HorizontalExpression__Group_0__0");
					put(grammarAccess.getHorizontalExpressionAccess().getGroup_1(), "rule__HorizontalExpression__Group_1__0");
					put(grammarAccess.getHorizontalExpressionAccess().getGroup_2(), "rule__HorizontalExpression__Group_2__0");
					put(grammarAccess.getQuoteExpressionAccess().getGroup(), "rule__QuoteExpression__Group__0");
					put(grammarAccess.getCodeExpressionAccess().getGroup_0(), "rule__CodeExpression__Group_0__0");
					put(grammarAccess.getCodeExpressionAccess().getGroup_1(), "rule__CodeExpression__Group_1__0");
					put(grammarAccess.getHeaderDepth1ExpressionAccess().getGroup_0(), "rule__HeaderDepth1Expression__Group_0__0");
					put(grammarAccess.getHeaderDepth1ExpressionAccess().getGroup_1(), "rule__HeaderDepth1Expression__Group_1__0");
					put(grammarAccess.getHeaderDepth2ExpressionAccess().getGroup_0(), "rule__HeaderDepth2Expression__Group_0__0");
					put(grammarAccess.getHeaderDepth2ExpressionAccess().getGroup_1(), "rule__HeaderDepth2Expression__Group_1__0");
					put(grammarAccess.getHeaderDepth3ExpressionAccess().getGroup(), "rule__HeaderDepth3Expression__Group__0");
					put(grammarAccess.getHeaderDepth5ExpressionAccess().getGroup(), "rule__HeaderDepth5Expression__Group__0");
					put(grammarAccess.getHeaderDepth6ExpressionAccess().getGroup(), "rule__HeaderDepth6Expression__Group__0");
					put(grammarAccess.getHeaderDepth4ExpressionAccess().getGroup(), "rule__HeaderDepth4Expression__Group__0");
					put(grammarAccess.getFileAccess().getExpressionAssignment_1(), "rule__File__ExpressionAssignment_1");
					put(grammarAccess.getQuoteExpressionAccess().getTextexpressionAssignment_1(), "rule__QuoteExpression__TextexpressionAssignment_1");
					put(grammarAccess.getCodeExpressionAccess().getTextAssignment_0_1(), "rule__CodeExpression__TextAssignment_0_1");
					put(grammarAccess.getCodeExpressionAccess().getTextAssignment_1_2(), "rule__CodeExpression__TextAssignment_1_2");
					put(grammarAccess.getHeaderDepth1ExpressionAccess().getTitleAssignment_0_2(), "rule__HeaderDepth1Expression__TitleAssignment_0_2");
					put(grammarAccess.getHeaderDepth1ExpressionAccess().getTitleAssignment_1_0(), "rule__HeaderDepth1Expression__TitleAssignment_1_0");
					put(grammarAccess.getHeaderDepth2ExpressionAccess().getTitleAssignment_0_1(), "rule__HeaderDepth2Expression__TitleAssignment_0_1");
					put(grammarAccess.getHeaderDepth2ExpressionAccess().getTitleAssignment_1_0(), "rule__HeaderDepth2Expression__TitleAssignment_1_0");
					put(grammarAccess.getHeaderDepth3ExpressionAccess().getTitleAssignment_1(), "rule__HeaderDepth3Expression__TitleAssignment_1");
					put(grammarAccess.getHeaderDepth5ExpressionAccess().getTitleAssignment_1(), "rule__HeaderDepth5Expression__TitleAssignment_1");
					put(grammarAccess.getHeaderDepth6ExpressionAccess().getTitleAssignment_1(), "rule__HeaderDepth6Expression__TitleAssignment_1");
					put(grammarAccess.getHeaderDepth4ExpressionAccess().getTitleAssignment_1(), "rule__HeaderDepth4Expression__TitleAssignment_1");
					put(grammarAccess.getTextualExpressionAccess().getContentStringAssignment(), "rule__TextualExpression__ContentStringAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}

	public HammilDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HammilDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
