/*
 * generated by Xtext 2.12.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package markHammil.mm.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package markHammil.mm.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import markHammil.mm.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleFile
entryRuleFile
:
{ before(grammarAccess.getFileRule()); }
	 ruleFile
{ after(grammarAccess.getFileRule()); } 
	 EOF 
;

// Rule File
ruleFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFileAccess().getGroup()); }
		(rule__File__Group__0)
		{ after(grammarAccess.getFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getHeaderExpressionParserRuleCall()); }
		ruleHeaderExpression
		{ after(grammarAccess.getExpressionAccess().getHeaderExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeaderExpression
entryRuleHeaderExpression
:
{ before(grammarAccess.getHeaderExpressionRule()); }
	 ruleHeaderExpression
{ after(grammarAccess.getHeaderExpressionRule()); } 
	 EOF 
;

// Rule HeaderExpression
ruleHeaderExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeaderExpressionAccess().getGroup()); }
		(rule__HeaderExpression__Group__0)
		{ after(grammarAccess.getHeaderExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEmphasisExpression
entryRuleEmphasisExpression
:
{ before(grammarAccess.getEmphasisExpressionRule()); }
	 ruleEmphasisExpression
{ after(grammarAccess.getEmphasisExpressionRule()); } 
	 EOF 
;

// Rule EmphasisExpression
ruleEmphasisExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEmphasisExpressionAccess().getNaturalExpressionParserRuleCall()); }
		ruleNaturalExpression
		{ after(grammarAccess.getEmphasisExpressionAccess().getNaturalExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNaturalExpression
entryRuleNaturalExpression
:
{ before(grammarAccess.getNaturalExpressionRule()); }
	 ruleNaturalExpression
{ after(grammarAccess.getNaturalExpressionRule()); } 
	 EOF 
;

// Rule NaturalExpression
ruleNaturalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNaturalExpressionAccess().getGroup()); }
		(rule__NaturalExpression__Group__0)
		{ after(grammarAccess.getNaturalExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__0__Impl
	rule__File__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getFileAction_0()); }
	()
	{ after(grammarAccess.getFileAccess().getFileAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getExpressionAssignment_1()); }
	(rule__File__ExpressionAssignment_1)*
	{ after(grammarAccess.getFileAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HeaderExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeaderExpression__Group__0__Impl
	rule__HeaderExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderExpressionAccess().getNumberSignKeyword_0()); }
	'#'
	{ after(grammarAccess.getHeaderExpressionAccess().getNumberSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeaderExpression__Group__1__Impl
	rule__HeaderExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderExpressionAccess().getTitleAssignment_1()); }
	(rule__HeaderExpression__TitleAssignment_1)
	{ after(grammarAccess.getHeaderExpressionAccess().getTitleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeaderExpression__Group__2__Impl
	rule__HeaderExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderExpressionAccess().getNumberSignKeyword_2()); }
	('#')*
	{ after(grammarAccess.getHeaderExpressionAccess().getNumberSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeaderExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderExpressionAccess().getBLTerminalRuleCall_3()); }
	(RULE_BL)?
	{ after(grammarAccess.getHeaderExpressionAccess().getBLTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NaturalExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NaturalExpression__Group__0__Impl
	rule__NaturalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NaturalExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNaturalExpressionAccess().getEmphasisExpressionAction_0()); }
	()
	{ after(grammarAccess.getNaturalExpressionAccess().getEmphasisExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NaturalExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NaturalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NaturalExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNaturalExpressionAccess().getValueAssignment_1()); }
	(rule__NaturalExpression__ValueAssignment_1)
	{ after(grammarAccess.getNaturalExpressionAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__File__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFileAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFileAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderExpression__TitleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeaderExpressionAccess().getTitleEmphasisExpressionParserRuleCall_1_0()); }
		ruleEmphasisExpression
		{ after(grammarAccess.getHeaderExpressionAccess().getTitleEmphasisExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NaturalExpression__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNaturalExpressionAccess().getValueIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getNaturalExpressionAccess().getValueIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_BL : '\r'? '\n';

RULE_WS : (' '|'\t');

fragment RULE_DIGIT : '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ANY_OTHER : .;
