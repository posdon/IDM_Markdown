/*
 * generated by Xtext 2.12.0
 */
package org.xtext.markHammil.mh.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class HammilDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//File md::File:
		//	{md::File} expression+=Expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//{md::File} expression+=Expression*
		public Group getGroup() { return cGroup; }
		
		//{md::File}
		public Action getFileAction_0() { return cFileAction_0; }
		
		//expression+=Expression*
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQuoteExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHeaderDepth1ExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHeaderDepth2ExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHeaderDepth3ExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cHeaderDepth4ExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cHeaderDepth5ExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cHeaderDepth6ExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Expression md::Expression:
		//	QuoteExpression | HeaderDepth1Expression | HeaderDepth2Expression | HeaderDepth3Expression | HeaderDepth4Expression |
		//	HeaderDepth5Expression | HeaderDepth6Expression
		//	/*| HeaderDepth2Expression | HeaderDepth3Expression | HeaderDepth5Expression | HeaderDepth6Expression | HeaderDepth4Expression | TextualExpression */;
		@Override public ParserRule getRule() { return rule; }
		
		///*TableExpression | HorizontalExpression | ListExpression |*/ QuoteExpression | HeaderDepth1Expression |
		//HeaderDepth2Expression | HeaderDepth3Expression | HeaderDepth4Expression | HeaderDepth5Expression |
		//HeaderDepth6Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*TableExpression | HorizontalExpression | ListExpression |*/ QuoteExpression
		public RuleCall getQuoteExpressionParserRuleCall_0() { return cQuoteExpressionParserRuleCall_0; }
		
		///*LineBreakExpression | ItalicExpression | StrongExpression | ScratchExpression | HTMLExpression | CodeExpression | ReferenceExpression | LinkExpression | ImageExpression | VideoExpression | */
		//HeaderDepth1Expression
		public RuleCall getHeaderDepth1ExpressionParserRuleCall_1() { return cHeaderDepth1ExpressionParserRuleCall_1; }
		
		//HeaderDepth2Expression
		public RuleCall getHeaderDepth2ExpressionParserRuleCall_2() { return cHeaderDepth2ExpressionParserRuleCall_2; }
		
		//HeaderDepth3Expression
		public RuleCall getHeaderDepth3ExpressionParserRuleCall_3() { return cHeaderDepth3ExpressionParserRuleCall_3; }
		
		//HeaderDepth4Expression
		public RuleCall getHeaderDepth4ExpressionParserRuleCall_4() { return cHeaderDepth4ExpressionParserRuleCall_4; }
		
		//HeaderDepth5Expression
		public RuleCall getHeaderDepth5ExpressionParserRuleCall_5() { return cHeaderDepth5ExpressionParserRuleCall_5; }
		
		//HeaderDepth6Expression
		public RuleCall getHeaderDepth6ExpressionParserRuleCall_6() { return cHeaderDepth6ExpressionParserRuleCall_6; }
	}
	public class TextExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.TextExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextualExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuoteExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TextExpression md::TextExpression:
		//	TextualExpression | QuoteExpression;
		@Override public ParserRule getRule() { return rule; }
		
		///*HorizontalExpression | ItalicExpression | StrongExpression | ScratchExpression |*/ TextualExpression | QuoteExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*HorizontalExpression | ItalicExpression | StrongExpression | ScratchExpression |*/ TextualExpression
		public RuleCall getTextualExpressionParserRuleCall_0() { return cTextualExpressionParserRuleCall_0; }
		
		//QuoteExpression
		public RuleCall getQuoteExpressionParserRuleCall_1() { return cQuoteExpressionParserRuleCall_1; }
	}
	public class EmphasisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.EmphasisExpression");
		private final RuleCall cTextualExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EmphasisExpression md::EmphasisExpression:
		//	TextualExpression;
		@Override public ParserRule getRule() { return rule; }
		
		///*ItalicExpression | StrongExpression | ScratchExpression |*/ TextualExpression
		public RuleCall getTextualExpressionParserRuleCall() { return cTextualExpressionParserRuleCall; }
	}
	public class QuoteExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.QuoteExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextexpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextexpressionTextExpressionParserRuleCall_1_0 = (RuleCall)cTextexpressionAssignment_1.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		///*
		//TableExpression returns TableExpression:
		//	'TableExpression'
		//	'{'
		//		'tablelines' '{' tablelines+=TableLine ( "," tablelines+=TableLine)* '}' 
		//	'}';
		//
		//HorizontalExpression returns HorizontalExpression:
		//	{HorizontalExpression}
		//	'HorizontalExpression'
		//	;
		//
		//ListExpression returns ListExpression:
		//	'ListExpression'
		//	'{'
		//		'startingValue' startingValue=IntObject
		//		'listContent' '{' listContent+=TextExpression ( "," listContent+=TextExpression)* '}' 
		//	'}';
		//*/ QuoteExpression md::QuoteExpression hidden(S):
		//	'>' textexpression=TextExpression BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//'>' textexpression=TextExpression BL?
		public Group getGroup() { return cGroup; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//textexpression=TextExpression
		public Assignment getTextexpressionAssignment_1() { return cTextexpressionAssignment_1; }
		
		//TextExpression
		public RuleCall getTextexpressionTextExpressionParserRuleCall_1_0() { return cTextexpressionTextExpressionParserRuleCall_1_0; }
		
		//BL?
		public RuleCall getBLTerminalRuleCall_2() { return cBLTerminalRuleCall_2; }
	}
	public class HeaderDepth1ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.HeaderDepth1Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTitleAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_0_1_0 = (RuleCall)cTitleAssignment_0_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cBLTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTitleAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_1_0_0 = (RuleCall)cTitleAssignment_1_0.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cBLTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		///*
		//ItalicExpression returns ItalicExpression:
		//	'ItalicExpression'
		//	'{'
		//		'content' '{' content+=EmphasisExpression ( "," content+=EmphasisExpression)* '}' 
		//	'}';
		//
		//StrongExpression returns StrongExpression:
		//	'StrongExpression'
		//	'{'
		//		'content' '{' content+=EmphasisExpression ( "," content+=EmphasisExpression)* '}' 
		//	'}';
		//
		//ScratchExpression returns ScratchExpression:
		//	'ScratchExpression'
		//	'{'
		//		'content' '{' content+=EmphasisExpression ( "," content+=EmphasisExpression)* '}' 
		//	'}';
		//
		//HTMLExpression returns HTMLExpression:
		//	'HTMLExpression'
		//	'{'
		//		'text' text=String0
		//	'}';
		//
		//CodeExpression returns CodeExpression:
		//	'CodeExpression'
		//	'{'
		//		'text' text=String0
		//	'}';
		//
		//ReferenceExpression returns ReferenceExpression:
		//	'ReferenceExpression'
		//	'{'
		//		'name' name=String0
		//		'value' value=String0
		//	'}';
		//
		//LinkExpression returns LinkExpression:
		//	'LinkExpression'
		//	'{'
		//		'textURString0L' textURL=String0
		//		'isReferenced' isReferenced=BooleanObject
		//	'}';
		//
		//ImageExpression returns ImageExpression:
		//	'ImageExpression'
		//	'{'
		//		'textURL' textURL=String0
		//		'isReferenced' isReferenced=BooleanObject
		//	'}';
		//
		//VideoExpression returns VideoExpression:
		//	'VideoExpression'
		//	'{'
		//		'textURL' textURL=String0
		//		'textIMG' textIMG=String0
		//		'isReferenced' isReferenced=BooleanObject
		//	'}';
		//
		//	*/ HeaderDepth1Expression md::HeaderDepth1Expression hidden(S):
		//	'#' title=EmphasisExpression '#'* BL? | title=EmphasisExpression BL '='+ BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' title=EmphasisExpression '#'* BL? | title=EmphasisExpression BL '='+ BL?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'#' title=EmphasisExpression '#'* BL?
		public Group getGroup_0() { return cGroup_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_0_0() { return cNumberSignKeyword_0_0; }
		
		//title=EmphasisExpression
		public Assignment getTitleAssignment_0_1() { return cTitleAssignment_0_1; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_0_1_0() { return cTitleEmphasisExpressionParserRuleCall_0_1_0; }
		
		//'#'*
		public Keyword getNumberSignKeyword_0_2() { return cNumberSignKeyword_0_2; }
		
		//BL?
		public RuleCall getBLTerminalRuleCall_0_3() { return cBLTerminalRuleCall_0_3; }
		
		//title=EmphasisExpression BL '='+ BL?
		public Group getGroup_1() { return cGroup_1; }
		
		//title=EmphasisExpression
		public Assignment getTitleAssignment_1_0() { return cTitleAssignment_1_0; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_1_0_0() { return cTitleEmphasisExpressionParserRuleCall_1_0_0; }
		
		//BL
		public RuleCall getBLTerminalRuleCall_1_1() { return cBLTerminalRuleCall_1_1; }
		
		//'='+
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//BL?
		public RuleCall getBLTerminalRuleCall_1_3() { return cBLTerminalRuleCall_1_3; }
	}
	public class HeaderDepth2ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.HeaderDepth2Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNumberSignNumberSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTitleAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_0_1_0 = (RuleCall)cTitleAssignment_0_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cBLTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTitleAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_1_0_0 = (RuleCall)cTitleAssignment_1_0.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cBLTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//HeaderDepth2Expression md::HeaderDepth2Expression hidden(S):
		//	'##' title=EmphasisExpression '#'* BL? | title=EmphasisExpression BL '-'+ BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//'##' title=EmphasisExpression '#'* BL? | title=EmphasisExpression BL '-'+ BL?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'##' title=EmphasisExpression '#'* BL?
		public Group getGroup_0() { return cGroup_0; }
		
		//'##'
		public Keyword getNumberSignNumberSignKeyword_0_0() { return cNumberSignNumberSignKeyword_0_0; }
		
		//title=EmphasisExpression
		public Assignment getTitleAssignment_0_1() { return cTitleAssignment_0_1; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_0_1_0() { return cTitleEmphasisExpressionParserRuleCall_0_1_0; }
		
		//'#'*
		public Keyword getNumberSignKeyword_0_2() { return cNumberSignKeyword_0_2; }
		
		//BL?
		public RuleCall getBLTerminalRuleCall_0_3() { return cBLTerminalRuleCall_0_3; }
		
		//title=EmphasisExpression BL '-'+ BL?
		public Group getGroup_1() { return cGroup_1; }
		
		//title=EmphasisExpression
		public Assignment getTitleAssignment_1_0() { return cTitleAssignment_1_0; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_1_0_0() { return cTitleEmphasisExpressionParserRuleCall_1_0_0; }
		
		//BL
		public RuleCall getBLTerminalRuleCall_1_1() { return cBLTerminalRuleCall_1_1; }
		
		//'-'+
		public Keyword getHyphenMinusKeyword_1_2() { return cHyphenMinusKeyword_1_2; }
		
		//BL?
		public RuleCall getBLTerminalRuleCall_1_3() { return cBLTerminalRuleCall_1_3; }
	}
	public class HeaderDepth3ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.HeaderDepth3Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignNumberSignNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//HeaderDepth3Expression md::HeaderDepth3Expression hidden(S):
		//	'###' title=EmphasisExpression '#'* BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//'###' title=EmphasisExpression '#'* BL?
		public Group getGroup() { return cGroup; }
		
		//'###'
		public Keyword getNumberSignNumberSignNumberSignKeyword_0() { return cNumberSignNumberSignNumberSignKeyword_0; }
		
		//title=EmphasisExpression
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_1_0() { return cTitleEmphasisExpressionParserRuleCall_1_0; }
		
		//'#'*
		public Keyword getNumberSignKeyword_2() { return cNumberSignKeyword_2; }
		
		//BL?
		public RuleCall getBLTerminalRuleCall_3() { return cBLTerminalRuleCall_3; }
	}
	public class HeaderDepth5ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.HeaderDepth5Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//HeaderDepth5Expression md::HeaderDepth5Expression hidden(S):
		//	'#####' title=EmphasisExpression '#'* BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//'#####' title=EmphasisExpression '#'* BL?
		public Group getGroup() { return cGroup; }
		
		//'#####'
		public Keyword getNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_0() { return cNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_0; }
		
		//title=EmphasisExpression
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_1_0() { return cTitleEmphasisExpressionParserRuleCall_1_0; }
		
		//'#'*
		public Keyword getNumberSignKeyword_2() { return cNumberSignKeyword_2; }
		
		//BL?
		public RuleCall getBLTerminalRuleCall_3() { return cBLTerminalRuleCall_3; }
	}
	public class HeaderDepth6ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.HeaderDepth6Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//HeaderDepth6Expression md::HeaderDepth6Expression hidden(S):
		//	'######' title=EmphasisExpression '#'* BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//'######' title=EmphasisExpression '#'* BL?
		public Group getGroup() { return cGroup; }
		
		//'######'
		public Keyword getNumberSignNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_0() { return cNumberSignNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_0; }
		
		//title=EmphasisExpression
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_1_0() { return cTitleEmphasisExpressionParserRuleCall_1_0; }
		
		//'#'*
		public Keyword getNumberSignKeyword_2() { return cNumberSignKeyword_2; }
		
		//BL?
		public RuleCall getBLTerminalRuleCall_3() { return cBLTerminalRuleCall_3; }
	}
	public class HeaderDepth4ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.HeaderDepth4Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignNumberSignNumberSignNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//HeaderDepth4Expression md::HeaderDepth4Expression hidden(S):
		//	'####' title=EmphasisExpression '#'* BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//'####' title=EmphasisExpression '#'* BL?
		public Group getGroup() { return cGroup; }
		
		//'####'
		public Keyword getNumberSignNumberSignNumberSignNumberSignKeyword_0() { return cNumberSignNumberSignNumberSignNumberSignKeyword_0; }
		
		//title=EmphasisExpression
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_1_0() { return cTitleEmphasisExpressionParserRuleCall_1_0; }
		
		//'#'*
		public Keyword getNumberSignKeyword_2() { return cNumberSignKeyword_2; }
		
		//BL?
		public RuleCall getBLTerminalRuleCall_3() { return cBLTerminalRuleCall_3; }
	}
	public class TextualExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.TextualExpression");
		private final Assignment cContentStringAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentStringString0ParserRuleCall_0 = (RuleCall)cContentStringAssignment.eContents().get(0);
		
		//TextualExpression md::TextualExpression:
		//	contentString=String0;
		@Override public ParserRule getRule() { return rule; }
		
		//contentString=String0
		public Assignment getContentStringAssignment() { return cContentStringAssignment; }
		
		//String0
		public RuleCall getContentStringString0ParserRuleCall_0() { return cContentStringString0ParserRuleCall_0; }
	}
	public class String0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.String0");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		///*
		//TableLine returns TableLine:
		//	'TableLine'
		//	'{'
		//		'cellContent' '{' cellContent+=TextExpression ( "," cellContent+=TextExpression)* '}' 
		//	'}';
		//
		//IntObject returns type::IntObject:
		//* 
		//
		//	'IntObject' ;// TODO: implement this rule and an appropriate IValueConverter
		//*/ String0:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class BooleanObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.BooleanObject");
		private final Keyword cBooleanObjectKeyword = (Keyword)rule.eContents().get(1);
		
		//BooleanObject type::BooleanObject:
		//	'BooleanObject' /* TODO: implement this rule and an appropriate IValueConverter */;
		@Override public ParserRule getRule() { return rule; }
		
		//'BooleanObject'
		public Keyword getBooleanObjectKeyword() { return cBooleanObjectKeyword; }
	}
	
	
	private final FileElements pFile;
	private final ExpressionElements pExpression;
	private final TextExpressionElements pTextExpression;
	private final EmphasisExpressionElements pEmphasisExpression;
	private final QuoteExpressionElements pQuoteExpression;
	private final HeaderDepth1ExpressionElements pHeaderDepth1Expression;
	private final HeaderDepth2ExpressionElements pHeaderDepth2Expression;
	private final HeaderDepth3ExpressionElements pHeaderDepth3Expression;
	private final HeaderDepth5ExpressionElements pHeaderDepth5Expression;
	private final HeaderDepth6ExpressionElements pHeaderDepth6Expression;
	private final HeaderDepth4ExpressionElements pHeaderDepth4Expression;
	private final TextualExpressionElements pTextualExpression;
	private final String0Elements pString0;
	private final BooleanObjectElements pBooleanObject;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tBL;
	private final TerminalRule tS;
	private final TerminalRule tDIGIT;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tINT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HammilDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFile = new FileElements();
		this.pExpression = new ExpressionElements();
		this.pTextExpression = new TextExpressionElements();
		this.pEmphasisExpression = new EmphasisExpressionElements();
		this.pQuoteExpression = new QuoteExpressionElements();
		this.pHeaderDepth1Expression = new HeaderDepth1ExpressionElements();
		this.pHeaderDepth2Expression = new HeaderDepth2ExpressionElements();
		this.pHeaderDepth3Expression = new HeaderDepth3ExpressionElements();
		this.pHeaderDepth5Expression = new HeaderDepth5ExpressionElements();
		this.pHeaderDepth6Expression = new HeaderDepth6ExpressionElements();
		this.pHeaderDepth4Expression = new HeaderDepth4ExpressionElements();
		this.pTextualExpression = new TextualExpressionElements();
		this.pString0 = new String0Elements();
		this.pBooleanObject = new BooleanObjectElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.SL_COMMENT");
		this.tBL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.BL");
		this.tS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.S");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.DIGIT");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.DOUBLE");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.markHammil.mh.HammilDSL.INT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.markHammil.mh.HammilDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//File md::File:
	//	{md::File} expression+=Expression*;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//Expression md::Expression:
	//	QuoteExpression | HeaderDepth1Expression | HeaderDepth2Expression | HeaderDepth3Expression | HeaderDepth4Expression |
	//	HeaderDepth5Expression | HeaderDepth6Expression
	//	/*| HeaderDepth2Expression | HeaderDepth3Expression | HeaderDepth5Expression | HeaderDepth6Expression | HeaderDepth4Expression | TextualExpression */;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//TextExpression md::TextExpression:
	//	TextualExpression | QuoteExpression;
	public TextExpressionElements getTextExpressionAccess() {
		return pTextExpression;
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}
	
	//EmphasisExpression md::EmphasisExpression:
	//	TextualExpression;
	public EmphasisExpressionElements getEmphasisExpressionAccess() {
		return pEmphasisExpression;
	}
	
	public ParserRule getEmphasisExpressionRule() {
		return getEmphasisExpressionAccess().getRule();
	}
	
	///*
	//TableExpression returns TableExpression:
	//	'TableExpression'
	//	'{'
	//		'tablelines' '{' tablelines+=TableLine ( "," tablelines+=TableLine)* '}' 
	//	'}';
	//
	//HorizontalExpression returns HorizontalExpression:
	//	{HorizontalExpression}
	//	'HorizontalExpression'
	//	;
	//
	//ListExpression returns ListExpression:
	//	'ListExpression'
	//	'{'
	//		'startingValue' startingValue=IntObject
	//		'listContent' '{' listContent+=TextExpression ( "," listContent+=TextExpression)* '}' 
	//	'}';
	//*/ QuoteExpression md::QuoteExpression hidden(S):
	//	'>' textexpression=TextExpression BL?;
	public QuoteExpressionElements getQuoteExpressionAccess() {
		return pQuoteExpression;
	}
	
	public ParserRule getQuoteExpressionRule() {
		return getQuoteExpressionAccess().getRule();
	}
	
	///*
	//ItalicExpression returns ItalicExpression:
	//	'ItalicExpression'
	//	'{'
	//		'content' '{' content+=EmphasisExpression ( "," content+=EmphasisExpression)* '}' 
	//	'}';
	//
	//StrongExpression returns StrongExpression:
	//	'StrongExpression'
	//	'{'
	//		'content' '{' content+=EmphasisExpression ( "," content+=EmphasisExpression)* '}' 
	//	'}';
	//
	//ScratchExpression returns ScratchExpression:
	//	'ScratchExpression'
	//	'{'
	//		'content' '{' content+=EmphasisExpression ( "," content+=EmphasisExpression)* '}' 
	//	'}';
	//
	//HTMLExpression returns HTMLExpression:
	//	'HTMLExpression'
	//	'{'
	//		'text' text=String0
	//	'}';
	//
	//CodeExpression returns CodeExpression:
	//	'CodeExpression'
	//	'{'
	//		'text' text=String0
	//	'}';
	//
	//ReferenceExpression returns ReferenceExpression:
	//	'ReferenceExpression'
	//	'{'
	//		'name' name=String0
	//		'value' value=String0
	//	'}';
	//
	//LinkExpression returns LinkExpression:
	//	'LinkExpression'
	//	'{'
	//		'textURString0L' textURL=String0
	//		'isReferenced' isReferenced=BooleanObject
	//	'}';
	//
	//ImageExpression returns ImageExpression:
	//	'ImageExpression'
	//	'{'
	//		'textURL' textURL=String0
	//		'isReferenced' isReferenced=BooleanObject
	//	'}';
	//
	//VideoExpression returns VideoExpression:
	//	'VideoExpression'
	//	'{'
	//		'textURL' textURL=String0
	//		'textIMG' textIMG=String0
	//		'isReferenced' isReferenced=BooleanObject
	//	'}';
	//
	//	*/ HeaderDepth1Expression md::HeaderDepth1Expression hidden(S):
	//	'#' title=EmphasisExpression '#'* BL? | title=EmphasisExpression BL '='+ BL?;
	public HeaderDepth1ExpressionElements getHeaderDepth1ExpressionAccess() {
		return pHeaderDepth1Expression;
	}
	
	public ParserRule getHeaderDepth1ExpressionRule() {
		return getHeaderDepth1ExpressionAccess().getRule();
	}
	
	//HeaderDepth2Expression md::HeaderDepth2Expression hidden(S):
	//	'##' title=EmphasisExpression '#'* BL? | title=EmphasisExpression BL '-'+ BL?;
	public HeaderDepth2ExpressionElements getHeaderDepth2ExpressionAccess() {
		return pHeaderDepth2Expression;
	}
	
	public ParserRule getHeaderDepth2ExpressionRule() {
		return getHeaderDepth2ExpressionAccess().getRule();
	}
	
	//HeaderDepth3Expression md::HeaderDepth3Expression hidden(S):
	//	'###' title=EmphasisExpression '#'* BL?;
	public HeaderDepth3ExpressionElements getHeaderDepth3ExpressionAccess() {
		return pHeaderDepth3Expression;
	}
	
	public ParserRule getHeaderDepth3ExpressionRule() {
		return getHeaderDepth3ExpressionAccess().getRule();
	}
	
	//HeaderDepth5Expression md::HeaderDepth5Expression hidden(S):
	//	'#####' title=EmphasisExpression '#'* BL?;
	public HeaderDepth5ExpressionElements getHeaderDepth5ExpressionAccess() {
		return pHeaderDepth5Expression;
	}
	
	public ParserRule getHeaderDepth5ExpressionRule() {
		return getHeaderDepth5ExpressionAccess().getRule();
	}
	
	//HeaderDepth6Expression md::HeaderDepth6Expression hidden(S):
	//	'######' title=EmphasisExpression '#'* BL?;
	public HeaderDepth6ExpressionElements getHeaderDepth6ExpressionAccess() {
		return pHeaderDepth6Expression;
	}
	
	public ParserRule getHeaderDepth6ExpressionRule() {
		return getHeaderDepth6ExpressionAccess().getRule();
	}
	
	//HeaderDepth4Expression md::HeaderDepth4Expression hidden(S):
	//	'####' title=EmphasisExpression '#'* BL?;
	public HeaderDepth4ExpressionElements getHeaderDepth4ExpressionAccess() {
		return pHeaderDepth4Expression;
	}
	
	public ParserRule getHeaderDepth4ExpressionRule() {
		return getHeaderDepth4ExpressionAccess().getRule();
	}
	
	//TextualExpression md::TextualExpression:
	//	contentString=String0;
	public TextualExpressionElements getTextualExpressionAccess() {
		return pTextualExpression;
	}
	
	public ParserRule getTextualExpressionRule() {
		return getTextualExpressionAccess().getRule();
	}
	
	///*
	//TableLine returns TableLine:
	//	'TableLine'
	//	'{'
	//		'cellContent' '{' cellContent+=TextExpression ( "," cellContent+=TextExpression)* '}' 
	//	'}';
	//
	//IntObject returns type::IntObject:
	//* 
	//
	//	'IntObject' ;// TODO: implement this rule and an appropriate IValueConverter
	//*/ String0:
	//	STRING;
	public String0Elements getString0Access() {
		return pString0;
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}
	
	//BooleanObject type::BooleanObject:
	//	'BooleanObject' /* TODO: implement this rule and an appropriate IValueConverter */;
	public BooleanObjectElements getBooleanObjectAccess() {
		return pBooleanObject;
	}
	
	public ParserRule getBooleanObjectRule() {
		return getBooleanObjectAccess().getRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '\''))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal BL:
	//	'\r'? '\n';
	public TerminalRule getBLRule() {
		return tBL;
	}
	
	//terminal S:
	//	' ' | '\t';
	public TerminalRule getSRule() {
		return tS;
	}
	
	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	INT ('.' DIGIT*);
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0' | '1'..'9' DIGIT*;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
