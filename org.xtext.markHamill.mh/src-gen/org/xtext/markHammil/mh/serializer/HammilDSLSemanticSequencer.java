/*
 * generated by Xtext 2.12.0
 */
package org.xtext.markHammil.mh.serializer;

import com.google.inject.Inject;
import java.util.Set;
import markdown.File;
import markdown.HeaderDepth1Expression;
import markdown.MarkdownPackage;
import markdown.TextualExpression;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.markHammil.mh.services.HammilDSLGrammarAccess;

@SuppressWarnings("all")
public class HammilDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HammilDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MarkdownPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MarkdownPackage.FILE:
				sequence_File(context, (File) semanticObject); 
				return; 
			case MarkdownPackage.HEADER_DEPTH1_EXPRESSION:
				sequence_HeaderDepth1Expression(context, (HeaderDepth1Expression) semanticObject); 
				return; 
			case MarkdownPackage.TEXTUAL_EXPRESSION:
				sequence_TextualExpression(context, (TextualExpression) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     File returns File
	 *
	 * Constraint:
	 *     expression+=Expression*
	 */
	protected void sequence_File(ISerializationContext context, File semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns HeaderDepth1Expression
	 *     HeaderDepth1Expression returns HeaderDepth1Expression
	 *
	 * Constraint:
	 *     (title=EmphasisExpression | title=EmphasisExpression)
	 */
	protected void sequence_HeaderDepth1Expression(ISerializationContext context, HeaderDepth1Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TextExpression returns TextualExpression
	 *     EmphasisExpression returns TextualExpression
	 *     TextualExpression returns TextualExpression
	 *
	 * Constraint:
	 *     contentString=String0
	 */
	protected void sequence_TextualExpression(ISerializationContext context, TextualExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MarkdownPackage.Literals.TEXTUAL_EXPRESSION__CONTENT_STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MarkdownPackage.Literals.TEXTUAL_EXPRESSION__CONTENT_STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextualExpressionAccess().getContentStringString0ParserRuleCall_0(), semanticObject.getContentString());
		feeder.finish();
	}
	
	
}
