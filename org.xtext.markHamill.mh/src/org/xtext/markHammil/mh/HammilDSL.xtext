// automatically generated by Xtext
grammar org.xtext.markHammil.mh.HammilDSL with org.eclipse.xtext.common.Terminals

import "platform:/resource/Markdown/model/markdown.ecore" as md
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

File returns md::File:
	{md::File}
		(expression+=Expression)*
	;

Expression returns md::Expression:

	/*TableExpression | HorizontalExpression | ListExpression |*/ 
	 TextualExpression | 
	/*LineBreakExpression | ItalicExpression | StrongExpression | ScratchExpression | HTMLExpression | CodeExpression | ReferenceExpression | LinkExpression | ImageExpression | VideoExpression | */ 
	 => ( HeaderDepth1Expression | HeaderDepth2Expression | HeaderDepth3Expression | HeaderDepth4Expression | HeaderDepth5Expression | HeaderDepth6Expression )
	/*| HeaderDepth2Expression | HeaderDepth3Expression | HeaderDepth5Expression | HeaderDepth6Expression | HeaderDepth4Expression | TextualExpression */;



TextExpression returns md::TextExpression:
	/*HorizontalExpression | ItalicExpression | StrongExpression | ScratchExpression |*/ 
	//QuoteExpression | 
	TextualExpression;

EmphasisExpression returns md::EmphasisExpression:
	/*ItalicExpression | StrongExpression | ScratchExpression |*/ 
	TextualExpression;

/*
TableExpression returns TableExpression:
	'TableExpression'
	'{'
		'tablelines' '{' tablelines+=TableLine ( "," tablelines+=TableLine)* '}' 
	'}';

HorizontalExpression returns HorizontalExpression:
	{HorizontalExpression}
	'HorizontalExpression'
	;

ListExpression returns ListExpression:
	'ListExpression'
	'{'
		'startingValue' startingValue=IntObject
		'listContent' '{' listContent+=TextExpression ( "," listContent+=TextExpression)* '}' 
	'}';
*/
QuoteExpression returns md::QuoteExpression hidden(S):
		'>' textexpression=TextExpression BL?
	;



/*
ItalicExpression returns ItalicExpression:
	'ItalicExpression'
	'{'
		'content' '{' content+=EmphasisExpression ( "," content+=EmphasisExpression)* '}' 
	'}';

StrongExpression returns StrongExpression:
	'StrongExpression'
	'{'
		'content' '{' content+=EmphasisExpression ( "," content+=EmphasisExpression)* '}' 
	'}';

ScratchExpression returns ScratchExpression:
	'ScratchExpression'
	'{'
		'content' '{' content+=EmphasisExpression ( "," content+=EmphasisExpression)* '}' 
	'}';

HTMLExpression returns HTMLExpression:
	'HTMLExpression'
	'{'
		'text' text=String0
	'}';

CodeExpression returns CodeExpression:
	'CodeExpression'
	'{'
		'text' text=String0
	'}';

ReferenceExpression returns ReferenceExpression:
	'ReferenceExpression'
	'{'
		'name' name=String0
		'value' value=String0
	'}';

LinkExpression returns LinkExpression:
	'LinkExpression'
	'{'
		'textURString0L' textURL=String0
		'isReferenced' isReferenced=BooleanObject
	'}';

ImageExpression returns ImageExpression:
	'ImageExpression'
	'{'
		'textURL' textURL=String0
		'isReferenced' isReferenced=BooleanObject
	'}';

VideoExpression returns VideoExpression:
	'VideoExpression'
	'{'
		'textURL' textURL=String0
		'textIMG' textIMG=String0
		'isReferenced' isReferenced=BooleanObject
	'}';

	*/

HeaderDepth1Expression returns md::HeaderDepth1Expression hidden(S):
		=> '#' title=EmphasisExpression ('#')* BL ? |
		title=EmphasisExpression BL ('=')+ BL?
	;


HeaderDepth2Expression returns md::HeaderDepth2Expression hidden(S):
		=> '##' title=EmphasisExpression ('#')* BL ? |
		title=EmphasisExpression BL ('-')+ BL?
	;

HeaderDepth3Expression returns md::HeaderDepth3Expression hidden(S):
	'###' title=EmphasisExpression ('#')* BL ?
	;

HeaderDepth5Expression returns md::HeaderDepth5Expression hidden(S):
	'#####' title=EmphasisExpression ('#')* BL ?
	;

HeaderDepth6Expression returns md::HeaderDepth6Expression hidden(S):
	'######'  title=EmphasisExpression ('#')* BL ?
	;

HeaderDepth4Expression returns md::HeaderDepth4Expression hidden(S):
	'####'  title=EmphasisExpression ('#')* BL ?
	;

TextualExpression returns md::TextualExpression:
	contentString=String0
	;

/*
TableLine returns TableLine:
	'TableLine'
	'{'
		'cellContent' '{' cellContent+=TextExpression ( "," cellContent+=TextExpression)* '}' 
	'}';

IntObject returns type::IntObject:
* 

	'IntObject' ;// TODO: implement this rule and an appropriate IValueConverter
*/

String0 returns ecore::EString :
	 STRING
	;

BooleanObject returns type::BooleanObject:
	'BooleanObject' /* TODO: implement this rule and an appropriate IValueConverter */;
	
// Inutile malheureusement
// Ne reprÃ©sente pas le .*
terminal TEXT:
	('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
	;	

terminal STRING
: 
'"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"'))* '"' |
"'" ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'\''))* "'" ;
terminal ML_COMMENT
: '/*' -> '*/';
terminal SL_COMMENT 
: '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal BL: ('\r'? '\n');
terminal S: (' '|'\t');
terminal fragment DIGIT: '0'..'9';
terminal DOUBLE returns ecore::EDouble: INT ('.' DIGIT*);
terminal INT returns ecore::EInt: '0' | ('1'..'9' DIGIT*);



//('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
