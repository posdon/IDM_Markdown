/*
 * generated by Xtext 2.12.0
 */
grammar InternalHamillDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.markhamill.mh.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.markhamill.mh.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.markhamill.mh.services.HamillDslGrammarAccess;

}
@parser::members {
	private HamillDslGrammarAccess grammarAccess;

	public void setGrammarAccess(HamillDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleFile
entryRuleFile
:
{ before(grammarAccess.getFileRule()); }
	 ruleFile
{ after(grammarAccess.getFileRule()); } 
	 EOF 
;

// Rule File
ruleFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFileAccess().getGroup()); }
		(rule__File__Group__0)
		{ after(grammarAccess.getFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getHeaderExpressionParserRuleCall()); }
		ruleHeaderExpression
		{ after(grammarAccess.getExpressionAccess().getHeaderExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeaderExpression
entryRuleHeaderExpression
:
{ before(grammarAccess.getHeaderExpressionRule()); }
	 ruleHeaderExpression
{ after(grammarAccess.getHeaderExpressionRule()); } 
	 EOF 
;

// Rule HeaderExpression
ruleHeaderExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeaderExpressionAccess().getHeaderDepth1ExpressionParserRuleCall()); }
		ruleHeaderDepth1Expression
		{ after(grammarAccess.getHeaderExpressionAccess().getHeaderDepth1ExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeaderDepth1Expression
entryRuleHeaderDepth1Expression
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getHeaderDepth1ExpressionRule()); }
	 ruleHeaderDepth1Expression
{ after(grammarAccess.getHeaderDepth1ExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule HeaderDepth1Expression
ruleHeaderDepth1Expression 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeaderDepth1ExpressionAccess().getGroup()); }
		(rule__HeaderDepth1Expression__Group__0)
		{ after(grammarAccess.getHeaderDepth1ExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

rule__File__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__0__Impl
	rule__File__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getFileAction_0()); }
	()
	{ after(grammarAccess.getFileAccess().getFileAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getExpressionAssignment_1()); }
	(rule__File__ExpressionAssignment_1)*
	{ after(grammarAccess.getFileAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HeaderDepth1Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeaderDepth1Expression__Group__0__Impl
	rule__HeaderDepth1Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderDepth1Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderDepth1ExpressionAccess().getNumberSignKeyword_0()); }
	'#'
	{ after(grammarAccess.getHeaderDepth1ExpressionAccess().getNumberSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderDepth1Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeaderDepth1Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderDepth1Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderDepth1ExpressionAccess().getContentAssignment_1()); }
	(rule__HeaderDepth1Expression__ContentAssignment_1)
	{ after(grammarAccess.getHeaderDepth1ExpressionAccess().getContentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__File__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFileAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFileAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderDepth1Expression__ContentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeaderDepth1ExpressionAccess().getContentTextualExpressionCrossReference_1_0()); }
		(
			{ before(grammarAccess.getHeaderDepth1ExpressionAccess().getContentTextualExpressionIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getHeaderDepth1ExpressionAccess().getContentTextualExpressionIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getHeaderDepth1ExpressionAccess().getContentTextualExpressionCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

fragment RULE_DIGIT : '0'..'9';

RULE_DOUBLE : RULE_INT '.' RULE_DIGIT*;

fragment RULE_INT : ('0'|'1'..'9' RULE_DIGIT*);

RULE_ANY_OTHER : .;
