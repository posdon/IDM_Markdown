/*
 * generated by Xtext 2.12.0
 */
package org.xtext.markhamill.mh.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.markhamill.mh.ide.contentassist.antlr.internal.InternalHamillDslParser;
import org.xtext.markhamill.mh.services.HamillDslGrammarAccess;

public class HamillDslParser extends AbstractContentAssistParser {

	@Inject
	private HamillDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalHamillDslParser createParser() {
		InternalHamillDslParser result = new InternalHamillDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBOOLEAN_LITERALAccess().getAlternatives(), "rule__BOOLEAN_LITERAL__Alternatives");
					put(grammarAccess.getFileAccess().getGroup(), "rule__File__Group__0");
					put(grammarAccess.getHeaderDepth1ExpressionAccess().getGroup(), "rule__HeaderDepth1Expression__Group__0");
					put(grammarAccess.getFileAccess().getExpressionAssignment_1(), "rule__File__ExpressionAssignment_1");
					put(grammarAccess.getTextualExpressionAccess().getContentAssignment(), "rule__TextualExpression__ContentAssignment");
					put(grammarAccess.getHeaderDepth1ExpressionAccess().getContentAssignment_1(), "rule__HeaderDepth1Expression__ContentAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HamillDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HamillDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
