/*
 * generated by Xtext 2.12.0
 */
package org.xtext.robot.perdu.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.robot.perdu.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.robot.perdu.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getBoolExpAccess().getAlternatives(), "rule__BoolExp__Alternatives");
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getBOOLEAN_LITERALAccess().getAlternatives(), "rule__BOOLEAN_LITERAL__Alternatives");
					put(grammarAccess.getProgramUnitAccess().getGroup(), "rule__ProgramUnit__Group__0");
					put(grammarAccess.getWhileLoopAccess().getGroup(), "rule__WhileLoop__Group__0");
					put(grammarAccess.getNegExpAccess().getGroup(), "rule__NegExp__Group__0");
					put(grammarAccess.getAndExpAccess().getGroup(), "rule__AndExp__Group__0");
					put(grammarAccess.getIfBlockAccess().getGroup(), "rule__IfBlock__Group__0");
					put(grammarAccess.getIfBlockAccess().getGroup_5(), "rule__IfBlock__Group_5__0");
					put(grammarAccess.getPrintCmdAccess().getGroup_0(), "rule__PrintCmd__Group_0__0");
					put(grammarAccess.getPrintCmdAccess().getGroup_0_2(), "rule__PrintCmd__Group_0_2__0");
					put(grammarAccess.getPrintCmdAccess().getGroup_1(), "rule__PrintCmd__Group_1__0");
					put(grammarAccess.getPrintCmdAccess().getGroup_2(), "rule__PrintCmd__Group_2__0");
					put(grammarAccess.getPrintCmdAccess().getGroup_3(), "rule__PrintCmd__Group_3__0");
					put(grammarAccess.getPrintCmdAccess().getGroup_3_0(), "rule__PrintCmd__Group_3_0__0");
					put(grammarAccess.getStopEngineCmdAccess().getGroup(), "rule__StopEngineCmd__Group__0");
					put(grammarAccess.getStopProgramCmdAccess().getGroup(), "rule__StopProgramCmd__Group__0");
					put(grammarAccess.getTurnCmdAccess().getGroup_0(), "rule__TurnCmd__Group_0__0");
					put(grammarAccess.getTurnCmdAccess().getGroup_0_2(), "rule__TurnCmd__Group_0_2__0");
					put(grammarAccess.getTurnCmdAccess().getGroup_1(), "rule__TurnCmd__Group_1__0");
					put(grammarAccess.getTurnCmdAccess().getGroup_1_0(), "rule__TurnCmd__Group_1_0__0");
					put(grammarAccess.getHasTurnedCmdAccess().getGroup(), "rule__HasTurnedCmd__Group__0");
					put(grammarAccess.getObstacleCmdAccess().getGroup(), "rule__ObstacleCmd__Group__0");
					put(grammarAccess.getBipCmdAccess().getGroup_0(), "rule__BipCmd__Group_0__0");
					put(grammarAccess.getBipCmdAccess().getGroup_0_2(), "rule__BipCmd__Group_0_2__0");
					put(grammarAccess.getBipCmdAccess().getGroup_1(), "rule__BipCmd__Group_1__0");
					put(grammarAccess.getBipCmdAccess().getGroup_2(), "rule__BipCmd__Group_2__0");
					put(grammarAccess.getBipCmdAccess().getGroup_2_0(), "rule__BipCmd__Group_2_0__0");
					put(grammarAccess.getSetTurnAngleCmdAccess().getGroup(), "rule__SetTurnAngleCmd__Group__0");
					put(grammarAccess.getMoveCmdAccess().getGroup(), "rule__MoveCmd__Group__0");
					put(grammarAccess.getProgramUnitAccess().getBlockAssignment_1(), "rule__ProgramUnit__BlockAssignment_1");
					put(grammarAccess.getWhileLoopAccess().getLoopCondAssignment_1(), "rule__WhileLoop__LoopCondAssignment_1");
					put(grammarAccess.getWhileLoopAccess().getBlockAssignment_3(), "rule__WhileLoop__BlockAssignment_3");
					put(grammarAccess.getNegExpAccess().getExpAssignment_1(), "rule__NegExp__ExpAssignment_1");
					put(grammarAccess.getAndExpAccess().getLeftExpAssignment_1(), "rule__AndExp__LeftExpAssignment_1");
					put(grammarAccess.getAndExpAccess().getRightExpAssignment_2(), "rule__AndExp__RightExpAssignment_2");
					put(grammarAccess.getIfBlockAccess().getConditionAssignment_1(), "rule__IfBlock__ConditionAssignment_1");
					put(grammarAccess.getIfBlockAccess().getThenBlockAssignment_3(), "rule__IfBlock__ThenBlockAssignment_3");
					put(grammarAccess.getIfBlockAccess().getThenBlockAssignment_4(), "rule__IfBlock__ThenBlockAssignment_4");
					put(grammarAccess.getIfBlockAccess().getElseBlockAssignment_5_1(), "rule__IfBlock__ElseBlockAssignment_5_1");
					put(grammarAccess.getIfBlockAccess().getElseBlockAssignment_5_2(), "rule__IfBlock__ElseBlockAssignment_5_2");
					put(grammarAccess.getPrintCmdAccess().getMsgAssignment_0_2_2(), "rule__PrintCmd__MsgAssignment_0_2_2");
					put(grammarAccess.getPrintCmdAccess().getDurationAssignment_1_2(), "rule__PrintCmd__DurationAssignment_1_2");
					put(grammarAccess.getPrintCmdAccess().getLineAssignment_2_2(), "rule__PrintCmd__LineAssignment_2_2");
					put(grammarAccess.getPrintCmdAccess().getColAssignment_3_0_2(), "rule__PrintCmd__ColAssignment_3_0_2");
					put(grammarAccess.getTurnCmdAccess().getPowerAssignment_0_2_2(), "rule__TurnCmd__PowerAssignment_0_2_2");
					put(grammarAccess.getTurnCmdAccess().getAngleAssignment_1_0_2(), "rule__TurnCmd__AngleAssignment_1_0_2");
					put(grammarAccess.getHasTurnedCmdAccess().getAngleAssignment_4(), "rule__HasTurnedCmd__AngleAssignment_4");
					put(grammarAccess.getObstacleCmdAccess().getDistanceAssignment_4(), "rule__ObstacleCmd__DistanceAssignment_4");
					put(grammarAccess.getBipCmdAccess().getDurationAssignment_0_2_2(), "rule__BipCmd__DurationAssignment_0_2_2");
					put(grammarAccess.getBipCmdAccess().getPowerAssignment_1_2(), "rule__BipCmd__PowerAssignment_1_2");
					put(grammarAccess.getBipCmdAccess().getRepetAssignment_2_0_2(), "rule__BipCmd__RepetAssignment_2_0_2");
					put(grammarAccess.getSetTurnAngleCmdAccess().getAngleAssignment_4(), "rule__SetTurnAngleCmd__AngleAssignment_4");
					put(grammarAccess.getMoveCmdAccess().getPowerAssignment_4(), "rule__MoveCmd__PowerAssignment_4");
					put(grammarAccess.getPrintCmdAccess().getUnorderedGroup(), "rule__PrintCmd__UnorderedGroup");
					put(grammarAccess.getTurnCmdAccess().getUnorderedGroup(), "rule__TurnCmd__UnorderedGroup");
					put(grammarAccess.getBipCmdAccess().getUnorderedGroup(), "rule__BipCmd__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
