/*
 * generated by Xtext 2.12.0
 */
package org.xtext.robot.perdu.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import robot.flotCtrl.Expression
import robot.robot.ProgramUnit
import robot.flotCtrl.WhileLoop
import robot.flotCtrl.NegExp
import robot.flotCtrl.BoolExp
import robot.flotCtrl.AndExp
import robot.robot.HasTurnedCmd
import robot.flotCtrl.IfBlock
import robot.robot.ObstacleCmd
import robot.robot.Command
import robot.robot.PrintCmd
import robot.robot.StopEngineCmd
import robot.robot.StopProgramCmd
import robot.robot.TurnCmd
import robot.robot.Bip
import robot.robot.SetTurnAngleCmd
import robot.robot.MoveCmd

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource res, IFileSystemAccess2 fsa, IGeneratorContext ctx){
	 	fsa.generateFile(res.URI.trimFileExtension.appendFileExtension("nxc").lastSegment, 
	 	res.allContents.filter(ProgramUnit).toIterable.head.compile.toString)
	}
	
	def dispatch compile(Expression exp) '''this expression is not supported:«exp»'''

	def dispatch compile(BoolExp exp) '''this boolean expression is not supported:'«exp»'''

	def dispatch compile(Command command) '''this command is not supported:«command»'''
	
	def dispatch compile(ProgramUnit program) '''#include "NXCDefs.h"
	task main(){
		SetSensorLowspeed(S4);
		int angle;
		while(1){
			«FOR exp : program.block»
				«exp.compile»
			«ENDFOR»
		}
	}'''
	
	def dispatch compile(WhileLoop whileLoop) '''
		while(«whileLoop.loopCond.compile»){
			«FOR exp : whileLoop.block»
				«exp.compile»
			«ENDFOR»
		}		
	'''
	
	def dispatch compile(NegExp negExp) '''
		!(«negExp.exp.compile»)
	'''
	
	def dispatch compile(AndExp andExp) '''
		«andExp.leftExp.compile» && «andExp.rightExp.compile»
	'''

	
	
	def dispatch compile(IfBlock ifBlock) '''
		if(«ifBlock.condition.compile»){
			«FOR exp : ifBlock.thenBlock»
				«exp.compile»
			«ENDFOR»
		}else{
			«FOR exp : ifBlock.elseBlock»
				«exp.compile»
			«ENDFOR»
		}
	'''
	
	def dispatch compile(PrintCmd printCmd) '''TextOut(«printCmd.line»,LCD_LINE«printCmd.col»,«printCmd.msg»);
	Wait(«printCmd.duration»);'''
	
	def dispatch compile(StopEngineCmd stopEngineCmd) '''Off(OUT_BC);'''
	
	def dispatch compile(StopProgramCmd stopProgramCmd) '''Stop(true);'''
	
	def dispatch compile(TurnCmd turnCmd) '''OnFwdSync(OUT_B,«turnCmd.power»,«turnCmd.angle»);'''
	
	def dispatch compile(HasTurnedCmd hasTurn) '''angle>=«hasTurn.angle»'''
	
	def dispatch compile(ObstacleCmd obstacleCmd) '''SensorUS(S4)<«obstacleCmd.distance»'''
	
	def dispatch compile(Bip bip) '''PlayToneEx(«bip.power»,«bip.duration»,«bip.power»,«bip.repet»);'''
	
	def dispatch compile(SetTurnAngleCmd setTurnAngleCmd) '''angle=«setTurnAngleCmd.angle»;'''
	
	def dispatch compile(MoveCmd moveCmd) '''OnFwdSync(OUT_B,«moveCmd.power»,0);'''
}
