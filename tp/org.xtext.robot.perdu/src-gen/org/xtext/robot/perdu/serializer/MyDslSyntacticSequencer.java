/*
 * generated by Xtext 2.12.0
 */
package org.xtext.robot.perdu.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.robot.perdu.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_BipCmd_CommaKeyword_0_2_3_q;
	protected AbstractElementAlias match_BipCmd_CommaKeyword_1_3_q;
	protected AbstractElementAlias match_BipCmd_CommaKeyword_2_0_3_q;
	protected AbstractElementAlias match_PrintCmd_CommaKeyword_0_2_3_q;
	protected AbstractElementAlias match_PrintCmd_CommaKeyword_1_3_q;
	protected AbstractElementAlias match_PrintCmd_CommaKeyword_2_3_q;
	protected AbstractElementAlias match_PrintCmd_CommaKeyword_3_0_3_q;
	protected AbstractElementAlias match_StopEngineCmd_StopProgramCmd___StopEngineKeyword_0_LeftParenthesisKeyword_1_RightParenthesisKeyword_2___or___StopProgramKeyword_0_LeftParenthesisKeyword_1_RightParenthesisKeyword_2__;
	protected AbstractElementAlias match_TurnCmd_CommaKeyword_0_2_3_q;
	protected AbstractElementAlias match_TurnCmd_CommaKeyword_1_0_3_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_BipCmd_CommaKeyword_0_2_3_q = new TokenAlias(false, true, grammarAccess.getBipCmdAccess().getCommaKeyword_0_2_3());
		match_BipCmd_CommaKeyword_1_3_q = new TokenAlias(false, true, grammarAccess.getBipCmdAccess().getCommaKeyword_1_3());
		match_BipCmd_CommaKeyword_2_0_3_q = new TokenAlias(false, true, grammarAccess.getBipCmdAccess().getCommaKeyword_2_0_3());
		match_PrintCmd_CommaKeyword_0_2_3_q = new TokenAlias(false, true, grammarAccess.getPrintCmdAccess().getCommaKeyword_0_2_3());
		match_PrintCmd_CommaKeyword_1_3_q = new TokenAlias(false, true, grammarAccess.getPrintCmdAccess().getCommaKeyword_1_3());
		match_PrintCmd_CommaKeyword_2_3_q = new TokenAlias(false, true, grammarAccess.getPrintCmdAccess().getCommaKeyword_2_3());
		match_PrintCmd_CommaKeyword_3_0_3_q = new TokenAlias(false, true, grammarAccess.getPrintCmdAccess().getCommaKeyword_3_0_3());
		match_StopEngineCmd_StopProgramCmd___StopEngineKeyword_0_LeftParenthesisKeyword_1_RightParenthesisKeyword_2___or___StopProgramKeyword_0_LeftParenthesisKeyword_1_RightParenthesisKeyword_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getStopEngineCmdAccess().getStopEngineKeyword_0()), new TokenAlias(false, false, grammarAccess.getStopEngineCmdAccess().getLeftParenthesisKeyword_1()), new TokenAlias(false, false, grammarAccess.getStopEngineCmdAccess().getRightParenthesisKeyword_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getStopProgramCmdAccess().getStopProgramKeyword_0()), new TokenAlias(false, false, grammarAccess.getStopProgramCmdAccess().getLeftParenthesisKeyword_1()), new TokenAlias(false, false, grammarAccess.getStopProgramCmdAccess().getRightParenthesisKeyword_2())));
		match_TurnCmd_CommaKeyword_0_2_3_q = new TokenAlias(false, true, grammarAccess.getTurnCmdAccess().getCommaKeyword_0_2_3());
		match_TurnCmd_CommaKeyword_1_0_3_q = new TokenAlias(false, true, grammarAccess.getTurnCmdAccess().getCommaKeyword_1_0_3());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBOOLEAN_LITERALRule())
			return getBOOLEAN_LITERALToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * BOOLEAN_LITERAL returns ecore::EBoolean: 'true'|'false';
	 */
	protected String getBOOLEAN_LITERALToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "true";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_BipCmd_CommaKeyword_0_2_3_q.equals(syntax))
				emit_BipCmd_CommaKeyword_0_2_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BipCmd_CommaKeyword_1_3_q.equals(syntax))
				emit_BipCmd_CommaKeyword_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BipCmd_CommaKeyword_2_0_3_q.equals(syntax))
				emit_BipCmd_CommaKeyword_2_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrintCmd_CommaKeyword_0_2_3_q.equals(syntax))
				emit_PrintCmd_CommaKeyword_0_2_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrintCmd_CommaKeyword_1_3_q.equals(syntax))
				emit_PrintCmd_CommaKeyword_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrintCmd_CommaKeyword_2_3_q.equals(syntax))
				emit_PrintCmd_CommaKeyword_2_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrintCmd_CommaKeyword_3_0_3_q.equals(syntax))
				emit_PrintCmd_CommaKeyword_3_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StopEngineCmd_StopProgramCmd___StopEngineKeyword_0_LeftParenthesisKeyword_1_RightParenthesisKeyword_2___or___StopProgramKeyword_0_LeftParenthesisKeyword_1_RightParenthesisKeyword_2__.equals(syntax))
				emit_StopEngineCmd_StopProgramCmd___StopEngineKeyword_0_LeftParenthesisKeyword_1_RightParenthesisKeyword_2___or___StopProgramKeyword_0_LeftParenthesisKeyword_1_RightParenthesisKeyword_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TurnCmd_CommaKeyword_0_2_3_q.equals(syntax))
				emit_TurnCmd_CommaKeyword_0_2_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TurnCmd_CommaKeyword_1_0_3_q.equals(syntax))
				emit_TurnCmd_CommaKeyword_1_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     duration=INT (ambiguity) 'bip' '(' 'duration' '=' duration=INT
	 *     duration=INT (ambiguity) 'power' '=' power=DOUBLE
	 *     duration=INT (ambiguity) 'repeat' '=' repet=BOOLEAN_LITERAL
	 *     duration=INT (ambiguity) (rule end)
	 */
	protected void emit_BipCmd_CommaKeyword_0_2_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     power=DOUBLE (ambiguity) 'bip' '(' 'duration' '=' duration=INT
	 *     power=DOUBLE (ambiguity) 'power' '=' power=DOUBLE
	 *     power=DOUBLE (ambiguity) 'repeat' '=' repet=BOOLEAN_LITERAL
	 *     power=DOUBLE (ambiguity) (rule end)
	 */
	protected void emit_BipCmd_CommaKeyword_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     repet=BOOLEAN_LITERAL (ambiguity) ')' 'bip' '(' 'duration' '=' duration=INT
	 *     repet=BOOLEAN_LITERAL (ambiguity) ')' 'power' '=' power=DOUBLE
	 *     repet=BOOLEAN_LITERAL (ambiguity) ')' 'repeat' '=' repet=BOOLEAN_LITERAL
	 *     repet=BOOLEAN_LITERAL (ambiguity) ')' (rule end)
	 */
	protected void emit_BipCmd_CommaKeyword_2_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     msg=STRING (ambiguity) 'col' '=' col=INT
	 *     msg=STRING (ambiguity) 'display' '(' 'msg' '=' msg=STRING
	 *     msg=STRING (ambiguity) 'duration' '=' duration=INT
	 *     msg=STRING (ambiguity) 'line' '=' line=INT
	 *     msg=STRING (ambiguity) (rule end)
	 */
	protected void emit_PrintCmd_CommaKeyword_0_2_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     duration=INT (ambiguity) 'col' '=' col=INT
	 *     duration=INT (ambiguity) 'display' '(' 'msg' '=' msg=STRING
	 *     duration=INT (ambiguity) 'duration' '=' duration=INT
	 *     duration=INT (ambiguity) 'line' '=' line=INT
	 *     duration=INT (ambiguity) (rule end)
	 */
	protected void emit_PrintCmd_CommaKeyword_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     line=INT (ambiguity) 'col' '=' col=INT
	 *     line=INT (ambiguity) 'display' '(' 'msg' '=' msg=STRING
	 *     line=INT (ambiguity) 'duration' '=' duration=INT
	 *     line=INT (ambiguity) 'line' '=' line=INT
	 *     line=INT (ambiguity) (rule end)
	 */
	protected void emit_PrintCmd_CommaKeyword_2_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     col=INT (ambiguity) ')' 'col' '=' col=INT
	 *     col=INT (ambiguity) ')' 'display' '(' 'msg' '=' msg=STRING
	 *     col=INT (ambiguity) ')' 'duration' '=' duration=INT
	 *     col=INT (ambiguity) ')' 'line' '=' line=INT
	 *     col=INT (ambiguity) ')' (rule end)
	 */
	protected void emit_PrintCmd_CommaKeyword_3_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('stopEngine' '(' ')') | ('stopProgram' '(' ')')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_StopEngineCmd_StopProgramCmd___StopEngineKeyword_0_LeftParenthesisKeyword_1_RightParenthesisKeyword_2___or___StopProgramKeyword_0_LeftParenthesisKeyword_1_RightParenthesisKeyword_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     power=DOUBLE (ambiguity) 'angle' '=' angle=DOUBLE
	 *     power=DOUBLE (ambiguity) 'turn' '(' 'power' '=' power=DOUBLE
	 *     power=DOUBLE (ambiguity) (rule end)
	 */
	protected void emit_TurnCmd_CommaKeyword_0_2_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     angle=DOUBLE (ambiguity) ')' 'angle' '=' angle=DOUBLE
	 *     angle=DOUBLE (ambiguity) ')' 'turn' '(' 'power' '=' power=DOUBLE
	 *     angle=DOUBLE (ambiguity) ')' (rule end)
	 */
	protected void emit_TurnCmd_CommaKeyword_1_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
