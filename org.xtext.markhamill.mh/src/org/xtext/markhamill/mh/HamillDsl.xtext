// automatically generated by Xtext
grammar org.xtext.markhamill.mh.HamillDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/Markdown/model/markdown.ecore" as markdown

File returns File:
	{File}
	'File'
	'{'
		('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
	'}';

Expression returns Expression:
	TableExpression | HorizontalExpression | ListExpression | QuoteExpression | LineBreakExpression | ItalicExpression | StrongExpression | ScratchExpression | HTMLExpression | CodeExpression | ReferenceExpression | LinkExpression | ImageExpression | VideoExpression | HeaderDepth1Expression | HeaderDepth2Expression | HeaderDepth3Expression | HeaderDepth5Expression | HeaderDepth6Expression | HeaderDepth4Expression | TextualExpression;


TextExpression returns TextExpression:
	HorizontalExpression | QuoteExpression | ItalicExpression | StrongExpression | ScratchExpression | TextualExpression;

EmphasisExpression returns EmphasisExpression:
	ItalicExpression | StrongExpression | ScratchExpression | TextualExpression;

TableExpression returns TableExpression:
	'TableExpression'
	'{'
		'tablelines' '{' tablelines+=TableLine ( "," tablelines+=TableLine)* '}' 
	'}';

HorizontalExpression returns HorizontalExpression:
	{HorizontalExpression}
	'HorizontalExpression'
	;

ListExpression returns ListExpression:
	'ListExpression'
	'{'
		'startingValue' startingValue=IntObject
		'listContent' '{' listContent+=TextExpression ( "," listContent+=TextExpression)* '}' 
	'}';

QuoteExpression returns QuoteExpression:
	'QuoteExpression'
	'{'
		'textexpression' textexpression=TextExpression
	'}';

LineBreakExpression returns LineBreakExpression:
	{LineBreakExpression}
	'LineBreakExpression'
	;

ItalicExpression returns ItalicExpression:
	'ItalicExpression'
	'{'
		'content' '(' content+=[EmphasisExpression|EString] ( "," content+=[EmphasisExpression|EString])* ')' 
	'}';

StrongExpression returns StrongExpression:
	'StrongExpression'
	'{'
		'content' '(' content+=[EmphasisExpression|EString] ( "," content+=[EmphasisExpression|EString])* ')' 
	'}';

ScratchExpression returns ScratchExpression:
	'ScratchExpression'
	'{'
		'content' '(' content+=[EmphasisExpression|EString] ( "," content+=[EmphasisExpression|EString])* ')' 
	'}';

HTMLExpression returns HTMLExpression:
	'HTMLExpression'
	'{'
		'text' text=String0
	'}';

CodeExpression returns CodeExpression:
	'CodeExpression'
	'{'
		'text' text=String0
	'}';

ReferenceExpression returns ReferenceExpression:
	'ReferenceExpression'
	'{'
		'name' name=String0
		'value' value=String0
	'}';

LinkExpression returns LinkExpression:
	'LinkExpression'
	'{'
		'textURL' textURL=String0
		'textBloc' textBloc=[EmphasisExpression|EString]
	'}';

ImageExpression returns ImageExpression:
	'ImageExpression'
	'{'
		'textURL' textURL=String0
		'textBloc' textBloc=[EmphasisExpression|EString]
	'}';

VideoExpression returns VideoExpression:
	'VideoExpression'
	'{'
		'textURL' textURL=String0
		'textIMG' textIMG=String0
		'textBloc' textBloc=[EmphasisExpression|EString]
	'}';

HeaderDepth1Expression returns HeaderDepth1Expression:
	'HeaderDepth1Expression'
	'{'
		'content' content=[EmphasisExpression|EString]
	'}';

HeaderDepth2Expression returns HeaderDepth2Expression:
	'HeaderDepth2Expression'
	'{'
		'content' content=[EmphasisExpression|EString]
	'}';

HeaderDepth3Expression returns HeaderDepth3Expression:
	'HeaderDepth3Expression'
	'{'
		'content' content=[EmphasisExpression|EString]
	'}';

HeaderDepth5Expression returns HeaderDepth5Expression:
	'HeaderDepth5Expression'
	'{'
		'content' content=[EmphasisExpression|EString]
	'}';

HeaderDepth6Expression returns HeaderDepth6Expression:
	'HeaderDepth6Expression'
	'{'
		'content' content=[EmphasisExpression|EString]
	'}';

HeaderDepth4Expression returns HeaderDepth4Expression:
	'HeaderDepth4Expression'
	'{'
		'content' content=[EmphasisExpression|EString]
	'}';

TextualExpression returns TextualExpression:
	'TextualExpression'
	'{'
		'newAttribute' newAttribute=String0
		('followingExpression' followingExpression=[EmphasisExpression|EString])?
	'}';

TableLine returns TableLine:
	'TableLine'
	'{'
		'cellContent' '{' cellContent+=TextExpression ( "," cellContent+=TextExpression)* '}' 
	'}';

IntObject returns type::IntObject:
	'IntObject' /* TODO: implement this rule and an appropriate IValueConverter */;

String0 returns type::String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;
