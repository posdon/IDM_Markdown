// automatically generated by Xtext
grammar org.xtext.markhamill.mh.HamillDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/Markdown/model/markdown.ecore" as markdown

File returns markdown::File:
	{markdown::File}
	((expression+=Expression)*)?
	;

Expression returns markdown::Expression:
	HeaderExpression; // | HeaderExpression;

EmphasisExpression returns markdown::EmphasisExpression:
	 TextualExpression;

/* 
ItalicExpression returns markdown::ItalicExpression hidden(WS):
	 ('*'|'_') content+=[markdown::EmphasisExpression] ('*'|'_') WS* (content+=[markdown::EmphasisExpression])*
	;

StrongExpression returns markdown::StrongExpression hidden(WS):
	 ('**'|'__') content+=[markdown::EmphasisExpression] ('**'|'__') WS* (content+=[markdown::EmphasisExpression])*
	 ;

ScratchExpression returns markdown::ScratchExpression hidden(WS):
	'~~' content+=[markdown::EmphasisExpression] '~~' WS* (content+=[markdown::EmphasisExpression])*
	;

*/

TextualExpression returns markdown::TextualExpression hidden(WS):
		content=ID
		//(followingExpression=[markdown::EmphasisExpression])?
	;
	
	
	

HeaderExpression returns markdown::HeaderExpression:
	HeaderDepth1Expression //| =>( HeaderDepth2Expression |  =>( HeaderDepth3Expression | =>( HeaderDepth4Expression | =>(HeaderDepth5Expression | =>HeaderDepth6Expression))))
;

HeaderDepth1Expression returns markdown::HeaderDepth1Expression hidden(WS):
	'#'  content=EmphasisExpression //|
	//content=[markdown::EmphasisExpression] LINE_BREAK_EXPRESSION  ('=')+  LINE_BREAK_EXPRESSION
	;




/* 
HeaderDepth2Expression returns markdown::HeaderDepth2Expression hidden(WS):
	'##'  content=[markdown::EmphasisExpression] LINE_BREAK_EXPRESSION |
	content=[markdown::EmphasisExpression] LINE_BREAK_EXPRESSION  ('-')+  LINE_BREAK_EXPRESSION
	;

HeaderDepth3Expression returns markdown::HeaderDepth3Expression hidden(WS):
	'###'  content=[markdown::EmphasisExpression] LINE_BREAK_EXPRESSION
	;

HeaderDepth5Expression returns markdown::HeaderDepth5Expression hidden(WS):
	'#####'  content=[markdown::EmphasisExpression] LINE_BREAK_EXPRESSION
	;

HeaderDepth6Expression returns markdown::HeaderDepth6Expression hidden(WS):
	'######'  content=[markdown::EmphasisExpression] LINE_BREAK_EXPRESSION
	;

HeaderDepth4Expression returns markdown::HeaderDepth4Expression hidden(WS):
	'####'  content=[markdown::EmphasisExpression] LINE_BREAK_EXPRESSION
	;
*/
	
	
	
/* 
IntObject returns type::IntObject:
	'IntObject'; // TODO: implement this rule and an appropriate IValueConverter
*/


BOOLEAN_LITERAL returns ecore::EBoolean: 'true'|'false';
terminal STRING	: 
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'";	
terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal ML_COMMENT
: '/*' -> '*/';
terminal SL_COMMENT 
: '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS
: (' '|'\t'|'\r'|'\n')+;
terminal fragment DIGIT: '0'..'9';
terminal DOUBLE returns ecore::EDouble: INT ('.' DIGIT*);
terminal INT returns ecore::EInt: '0' | ('1'..'9' DIGIT*);

/*
terminal LINE_BREAK_EXPRESSION :
	('\r'? '\n')?
	;
	* /
	*/
