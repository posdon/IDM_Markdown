// automatically generated by Xtext
grammar org.xtext.markhamill.mh.HamillDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/Markdown/model/markdown.ecore" as markdown

File returns markdown::File:
	{markdown::File}
	(expression+=Expression)*
	;

Expression returns markdown::Expression:
	TableExpression | HorizontalExpression | ListExpression | QuoteExpression | LineBreakExpression | ItalicExpression | StrongExpression | ScratchExpression | HTMLExpression | CodeExpression | ReferenceExpression | LinkExpression | ImageExpression | VideoExpression | HeaderDepth1Expression | HeaderDepth2Expression | HeaderDepth3Expression | HeaderDepth5Expression | HeaderDepth6Expression | HeaderDepth4Expression | TextualExpression;


TextExpression returns markdown::TextExpression:
	HorizontalExpression | QuoteExpression | ItalicExpression | StrongExpression | ScratchExpression | TextualExpression;

EmphasisExpression returns markdown::EmphasisExpression:
	StrongExpression | ItalicExpression  | ScratchExpression | TextualExpression;

TableExpression returns TableExpression:
	'TableExpression'
	'{'
		'tablelines' '{' tablelines+=TableLine ( "," tablelines+=TableLine)* '}' 
	'}';

HorizontalExpression returns markdown::HorizontalExpression:
	{markdown::HorizontalExpression}
	'-' '-' '-' ('-')* |
	'_' '_' '_' ('_')* |
	'*' '*' '*' ('*')
	;

ListExpression returns ListExpression:
	'ListExpression'
	'{'
		'startingValue' startingValue=IntObject
		'listContent' '{' listContent+=TextExpression ( "," listContent+=TextExpression)* '}' 
	'}';

QuoteExpression returns markdown::QuoteExpression:
		'>' textexpression=TextExpression '\n' '\n'
	;

LineBreakExpression returns LineBreakExpression:
	{LineBreakExpression}
	'LineBreakExpression'
	;

ItalicExpression returns markdown::ItalicExpression hidden(WS):
	 ('*'|'_') content+=[markdown::EmphasisExpression] ('*'|'_') WS* (content+=[markdown::EmphasisExpression])*
	;

StrongExpression returns markdown::StrongExpression:
	 ('**'|'__') content+=[markdown::EmphasisExpression] ('**'|'__') WS* (content+=[markdown::EmphasisExpression])*
	 ;

ScratchExpression returns markdown::ScratchExpression:
	'~~' content+=[markdown::EmphasisExpression] '~~' WS* (content+=[markdown::EmphasisExpression])*
	;

HTMLExpression returns HTMLExpression:
	'HTMLExpression'
	'{'
		'text' text=String0
	'}';

CodeExpression returns CodeExpression:
	'CodeExpression'
	'{'
		'text' text=String0
	'}';

ReferenceExpression returns ReferenceExpression:
	'ReferenceExpression'
	'{'
		'name' name=String0
		'value' value=String0
	'}';

LinkExpression returns LinkExpression:
	'LinkExpression'
	'{'
		'textURL' textURL=String0
		'textBloc' textBloc=[EmphasisExpression|EString]
	'}';

ImageExpression returns ImageExpression:
	'ImageExpression'
	'{'
		'textURL' textURL=String0
		'textBloc' textBloc=[EmphasisExpression|EString]
	'}';

VideoExpression returns VideoExpression:
	'VideoExpression'
	'{'
		'textURL' textURL=String0
		'textIMG' textIMG=String0
		'textBloc' textBloc=[EmphasisExpression|EString]
	'}';

HeaderDepth1Expression returns HeaderDepth1Expression:
	'HeaderDepth1Expression'
	'{'
		'content' content=[EmphasisExpression|EString]
	'}';

HeaderDepth2Expression returns HeaderDepth2Expression:
	'HeaderDepth2Expression'
	'{'
		'content' content=[EmphasisExpression|EString]
	'}';

HeaderDepth3Expression returns HeaderDepth3Expression:
	'HeaderDepth3Expression'
	'{'
		'content' content=[EmphasisExpression|EString]
	'}';

HeaderDepth5Expression returns HeaderDepth5Expression:
	'HeaderDepth5Expression'
	'{'
		'content' content=[EmphasisExpression|EString]
	'}';

HeaderDepth6Expression returns HeaderDepth6Expression:
	'HeaderDepth6Expression'
	'{'
		'content' content=[EmphasisExpression|EString]
	'}';

HeaderDepth4Expression returns HeaderDepth4Expression:
	'HeaderDepth4Expression'
	'{'
		'content' content=[EmphasisExpression|EString]
	'}';

TextualExpression returns TextualExpression:
	'TextualExpression'
	'{'
		'newAttribute' newAttribute=String0
		('followingExpression' followingExpression=[EmphasisExpression|EString])?
	'}';

TableLine returns TableLine:
	'TableLine'
	'{'
		'cellContent' '{' cellContent+=TextExpression ( "," cellContent+=TextExpression)* '}' 
	'}';

IntObject returns type::IntObject:
	'IntObject' /* TODO: implement this rule and an appropriate IValueConverter */;

String0 returns type::String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;
