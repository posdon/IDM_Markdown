// automatically generated by Xtext
grammar org.xtext.markhamill.mh.HamillDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/Markdown/model/markdown.ecore" as markdown

File returns markdown::File:
	{markdown::File}
	(expression+=Expression)*
	;

Expression returns markdown::Expression:
	TableExpression | TextExpression | ListExpression | LINE_BREAK_EXPRESSION | HTMLExpression | CodeExpression | ReferenceExpression | LinkExpression | ImageExpression | VideoExpression | HeaderExpression;


TextExpression returns markdown::TextExpression:
	HORIZONTAL_EXPRESSION | QuoteExpression | EmphasisExpression;

EmphasisExpression returns markdown::EmphasisExpression:
	StrongExpression | ItalicExpression  | ScratchExpression | TextualExpression;

TableExpression returns markdown::TableExpression hidden(WS):
		'|'? S* tablelines+=TableLine S* '|'? S* LINE_BREAK_EXPRESSION
		'|'? S* ( '--''-'* ) (S* '|' S* '--''-'* S*)+ '|'? LINE_BREAK_EXPRESSION
		('|'? S* tablelines+=TableLine S* '|'? S* LINE_BREAK_EXPRESSION)*  
	;

terminal S : 
	(' '|'\t')
;

terminal HORIZONTAL_EXPRESSION :
	S* ('-' S* '-' S* '-' S* ('-' S*)* |
	    '_' S* '_' S* '_' S* ('_' S*)* |
	    '*' S* '*' S* '*' S* ('*' S*)*  ) LINE_BREAK_EXPRESSION
	;

//TODO
ListExpression returns markdown::ListExpression:
	'ListExpression'
	'{'
		'startingValue' startingValue=IntObject
		'listContent' '{' listContent+=TextExpression ( "," listContent+=TextExpression)* '}' 
	'}';

QuoteExpression returns markdown::QuoteExpression hidden(WS):
		'>'textexpression=TextExpression LINE_BREAK_EXPRESSION
	;

terminal LINE_BREAK_EXPRESSION :
	('\r'? '\n')? | EOF
	;

ItalicExpression returns markdown::ItalicExpression hidden(WS):
	 ('*'|'_') content+=[markdown::EmphasisExpression] ('*'|'_') WS* (content+=[markdown::EmphasisExpression])*
	;

StrongExpression returns markdown::StrongExpression hidden(WS):
	 ('**'|'__') content+=[markdown::EmphasisExpression] ('**'|'__') WS* (content+=[markdown::EmphasisExpression])*
	 ;

ScratchExpression returns markdown::ScratchExpression hidden(WS):
	'~~' content+=[markdown::EmphasisExpression] '~~' WS* (content+=[markdown::EmphasisExpression])*
	;

HTMLExpression returns markdown::HTMLExpression hidden(WS):
		'<' text=String0 '>'
	;

//TODO
CodeExpression returns markdown::CodeExpression:
	'CodeExpression'
	'{'
		'text' text=String0
	'}';

ReferenceExpression returns markdown::ReferenceExpression hidden(WS):
	'[' S* name=String0 S* ']:' S* value=String0 S* LINE_BREAK_EXPRESSION
	;

//TODO
LinkExpression returns markdown::LinkExpression:
	'LinkExpression'
	'{'
		'textURL' textURL=String0
		'textBloc' textBloc=[markdown::EmphasisExpression]
	'}';

//TODO
ImageExpression returns markdown::ImageExpression:
	'ImageExpression'
	'{'
		'textURL' textURL=String0
		'textBloc' textBloc=[markdown::EmphasisExpression]
	'}';

//TODO
VideoExpression returns markdown::VideoExpression:
	'VideoExpression'
	'{'
		'textURL' textURL=String0
		'textIMG' textIMG=String0
		'textBloc' textBloc=[markdown::EmphasisExpression]
	'}';

HeaderExpression returns markdown::HeaderExpression:
	HeaderDepth1Expression | HeaderDepth2Expression | HeaderDepth3Expression | HeaderDepth4Expression | HeaderDepth5Expression | HeaderDepth6Expression
;

HeaderDepth1Expression returns markdown::HeaderDepth1Expression hidden(WS):
	'#' S* content=[markdown::EmphasisExpression] LINE_BREAK_EXPRESSION |
	content=[markdown::EmphasisExpression] LINE_BREAK_EXPRESSION S* ('=')* S* LINE_BREAK_EXPRESSION
	;

HeaderDepth2Expression returns markdown::HeaderDepth2Expression hidden(WS):
	'##' S* content=[markdown::EmphasisExpression] LINE_BREAK_EXPRESSION |
	content=[markdown::EmphasisExpression] LINE_BREAK_EXPRESSION S* ('-')* S* LINE_BREAK_EXPRESSION
	;

HeaderDepth3Expression returns markdown::HeaderDepth3Expression hidden(WS):
	'###' S* content=[markdown::EmphasisExpression] LINE_BREAK_EXPRESSION
	;

HeaderDepth5Expression returns markdown::HeaderDepth5Expression hidden(WS):
	'#####' S* content=[markdown::EmphasisExpression] LINE_BREAK_EXPRESSION
	;

HeaderDepth6Expression returns markdown::HeaderDepth6Expression hidden(WS):
	'######' S* content=[markdown::EmphasisExpression] LINE_BREAK_EXPRESSION
	;

HeaderDepth4Expression returns markdown::HeaderDepth4Expression hidden(WS):
	'####' S* content=[markdown::EmphasisExpression] LINE_BREAK_EXPRESSION
	;

TextualExpression returns markdown::TextualExpression hidden(WS):
		content=String0
		(followingExpression=[markdown::EmphasisExpression])?
	;

//TODO
TableLine returns markdown::TableLine:
	'TableLine'
	'{'
		'cellContent' '{' cellContent+=TextExpression ( "," cellContent+=TextExpression)* '}' 
	'}';

IntObject returns type::IntObject:
	'IntObject' /* TODO: implement this rule and an appropriate IValueConverter */;

String0 returns type::String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;
