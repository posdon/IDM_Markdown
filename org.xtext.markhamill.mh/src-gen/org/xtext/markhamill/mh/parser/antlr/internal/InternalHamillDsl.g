/*
 * generated by Xtext 2.12.0
 */
grammar InternalHamillDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.markhamill.mh.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.markhamill.mh.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.markhamill.mh.services.HamillDslGrammarAccess;

}

@parser::members {

 	private HamillDslGrammarAccess grammarAccess;

    public InternalHamillDslParser(TokenStream input, HamillDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "File";
   	}

   	@Override
   	protected HamillDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	iv_ruleFile=ruleFile
	{ $current=$iv_ruleFile.current; }
	EOF;

// Rule File
ruleFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFileAccess().getFileAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFileAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFileRule());
					}
					add(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.markhamill.mh.HamillDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getHeaderExpressionParserRuleCall());
	}
	this_HeaderExpression_0=ruleHeaderExpression
	{
		$current = $this_HeaderExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleHeaderExpression
entryRuleHeaderExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeaderExpressionRule()); }
	iv_ruleHeaderExpression=ruleHeaderExpression
	{ $current=$iv_ruleHeaderExpression.current; }
	EOF;

// Rule HeaderExpression
ruleHeaderExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getHeaderExpressionAccess().getHeaderDepth1ExpressionParserRuleCall());
	}
	this_HeaderDepth1Expression_0=ruleHeaderDepth1Expression
	{
		$current = $this_HeaderDepth1Expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleHeaderDepth1Expression
entryRuleHeaderDepth1Expression returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getHeaderDepth1ExpressionRule()); }
	iv_ruleHeaderDepth1Expression=ruleHeaderDepth1Expression
	{ $current=$iv_ruleHeaderDepth1Expression.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule HeaderDepth1Expression
ruleHeaderDepth1Expression returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='#'
		{
			newLeafNode(otherlv_0, grammarAccess.getHeaderDepth1ExpressionAccess().getNumberSignKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHeaderDepth1ExpressionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getHeaderDepth1ExpressionAccess().getContentTextualExpressionCrossReference_1_0());
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

fragment RULE_DIGIT : '0'..'9';

RULE_DOUBLE : RULE_INT '.' RULE_DIGIT*;

fragment RULE_INT : ('0'|'1'..'9' RULE_DIGIT*);

RULE_ANY_OTHER : .;
