// automatically generated by Xtext
grammar org.xtext.markup.mu.MyDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/Markdown/model/markdown.ecore" as md
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

File returns md::File:
	{md::File}
	'File'
	'{'
		('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
	'}';

Expression returns md::Expression:
	HeaderExpression | TextExpression_Impl | TableExpression | HorizontalExpression | ListExpression | QuoteExpression | LineBreakExpression | EmphasisExpression_Impl | ItalicExpression | StrongExpression | ScratchExpression | TextBloc | HTMLExpression | CodeExpression | ReferenceExpression | LinkExpression | ImageExpression | VideoExpression;

EmphasisExpression returns md::EmphasisExpression:
	EmphasisExpression_Impl | ItalicExpression | StrongExpression | ScratchExpression | TextBloc;


TextExpression returns md::TextExpression:
	TextExpression_Impl | HorizontalExpression | QuoteExpression | EmphasisExpression_Impl | ItalicExpression | StrongExpression | ScratchExpression | TextBloc;


HeaderExpression returns md::HeaderExpression:
	'HeaderExpression'
	'{'
		'depth' depth=IntObject
		'content' content=[md::EmphasisExpression|STRING]
	'}';

TextExpression_Impl returns md::TextExpression:
	{md::TextExpression}
	'TextExpression'
	;

TableExpression returns md::TableExpression:
	'TableExpression'
	'{'
		'nbColumn' nbColumn=IntObject
		'tablelines' '{' tablelines+=TableLine ( "," tablelines+=TableLine)* '}' 
	'}';

HorizontalExpression returns md::HorizontalExpression:
	{md::HorizontalExpression}
	'HorizontalExpression'
	;

ListExpression returns md::ListExpression:
	'ListExpression'
	'{'
		'startingValue' startingValue=IntObject
		'listContent' '{' listContent+=TextExpression ( "," listContent+=TextExpression)* '}' 
	'}';

QuoteExpression returns md::QuoteExpression:
	'QuoteExpression'
	'{'
		'textexpression' textexpression=TextExpression
	'}';

LineBreakExpression returns md::LineBreakExpression:
	{md::LineBreakExpression}
	'LineBreakExpression'
	;

EmphasisExpression_Impl returns md::EmphasisExpression:
	{md::EmphasisExpression}
	'EmphasisExpression'
	;

ItalicExpression returns md::ItalicExpression:
	'ItalicExpression'
	'{'
		'content' '{' content+=EmphasisExpression ( "," content+=EmphasisExpression)* '}' 
	'}';

StrongExpression returns md::StrongExpression:
	'StrongExpression'
	'{'
		'content' '{' content+=EmphasisExpression ( "," content+=EmphasisExpression)* '}' 
	'}';

ScratchExpression returns md::ScratchExpression:
	'ScratchExpression'
	'{'
		'content' '{' content+=EmphasisExpression ( "," content+=EmphasisExpression)* '}' 
	'}';

TextBloc returns md::TextBloc:
	'TextBloc'
	'{'
		'text' text=String0
	'}';

HTMLExpression returns md::HTMLExpression:
	'HTMLExpression'
	'{'
		'text' text=String0
	'}';

CodeExpression returns md::CodeExpression:
	'CodeExpression'
	'{'
		'text' text=String0
	'}';

ReferenceExpression returns md::ReferenceExpression:
	'ReferenceExpression'
	'{'
		'name' name=String0
		'value' value=String0
	'}';

LinkExpression returns md::LinkExpression:
	'LinkExpression'
	'{'
		'textURL' textURL=String0
		'textbloc' textbloc=[md::TextBloc|STRING]
	'}';

ImageExpression returns md::ImageExpression:
	'ImageExpression'
	'{'
		'textURL' textURL=String0
		'textbloc' textbloc=[md::TextBloc|STRING]
	'}';

VideoExpression returns md::VideoExpression:
	'VideoExpression'
	'{'
		'textURL' textURL=String0
		'textIMG' textIMG=String0
		'textbloc' textbloc=[md::TextBloc|STRING]
	'}';

IntObject returns type::IntObject:
	'IntObject' /* TODO: implement this rule and an appropriate IValueConverter */;

TableLine returns md::TableLine:
	'TableLine'
	'{'
		'nbColumn' nbColumn=IntObject
		'cellContent' '{' cellContent+=TextExpression ( "," cellContent+=TextExpression)* '}' 
	'}';

String0 returns type::String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;

	
BOOLEAN_LITERAL returns ecore::EBoolean: 'true'|'false';
terminal STRING
: 
'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'" ;
terminal ML_COMMENT
: '/*' -> '*/';
terminal SL_COMMENT 
: '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS
: (' '|'\t'|'\r'|'\n')+;
terminal fragment DIGIT: '0'..'9';
terminal DOUBLE returns ecore::EDouble: INT ('.' DIGIT*);
terminal INT returns ecore::EInt: '0' | ('1'..'9' DIGIT*);
