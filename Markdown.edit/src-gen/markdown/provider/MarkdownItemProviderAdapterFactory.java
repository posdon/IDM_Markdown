/**
 */
package markdown.provider;

import java.util.ArrayList;
import java.util.Collection;

import markdown.util.MarkdownAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MarkdownItemProviderAdapterFactory extends MarkdownAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MarkdownItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.File} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileItemProvider fileItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.File}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileAdapter() {
		if (fileItemProvider == null) {
			fileItemProvider = new FileItemProvider(this);
		}

		return fileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.TableExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableExpressionItemProvider tableExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.TableExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableExpressionAdapter() {
		if (tableExpressionItemProvider == null) {
			tableExpressionItemProvider = new TableExpressionItemProvider(this);
		}

		return tableExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.TableLine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableLineItemProvider tableLineItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.TableLine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableLineAdapter() {
		if (tableLineItemProvider == null) {
			tableLineItemProvider = new TableLineItemProvider(this);
		}

		return tableLineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.HorizontalExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HorizontalExpressionItemProvider horizontalExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.HorizontalExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHorizontalExpressionAdapter() {
		if (horizontalExpressionItemProvider == null) {
			horizontalExpressionItemProvider = new HorizontalExpressionItemProvider(this);
		}

		return horizontalExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.ListExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListExpressionItemProvider listExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.ListExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListExpressionAdapter() {
		if (listExpressionItemProvider == null) {
			listExpressionItemProvider = new ListExpressionItemProvider(this);
		}

		return listExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.QuoteExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuoteExpressionItemProvider quoteExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.QuoteExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuoteExpressionAdapter() {
		if (quoteExpressionItemProvider == null) {
			quoteExpressionItemProvider = new QuoteExpressionItemProvider(this);
		}

		return quoteExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.LineBreakExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LineBreakExpressionItemProvider lineBreakExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.LineBreakExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLineBreakExpressionAdapter() {
		if (lineBreakExpressionItemProvider == null) {
			lineBreakExpressionItemProvider = new LineBreakExpressionItemProvider(this);
		}

		return lineBreakExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.ItalicExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItalicExpressionItemProvider italicExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.ItalicExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItalicExpressionAdapter() {
		if (italicExpressionItemProvider == null) {
			italicExpressionItemProvider = new ItalicExpressionItemProvider(this);
		}

		return italicExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.StrongExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StrongExpressionItemProvider strongExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.StrongExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStrongExpressionAdapter() {
		if (strongExpressionItemProvider == null) {
			strongExpressionItemProvider = new StrongExpressionItemProvider(this);
		}

		return strongExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.ScratchExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScratchExpressionItemProvider scratchExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.ScratchExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScratchExpressionAdapter() {
		if (scratchExpressionItemProvider == null) {
			scratchExpressionItemProvider = new ScratchExpressionItemProvider(this);
		}

		return scratchExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.HTMLExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HTMLExpressionItemProvider htmlExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.HTMLExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHTMLExpressionAdapter() {
		if (htmlExpressionItemProvider == null) {
			htmlExpressionItemProvider = new HTMLExpressionItemProvider(this);
		}

		return htmlExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.CodeExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CodeExpressionItemProvider codeExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.CodeExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCodeExpressionAdapter() {
		if (codeExpressionItemProvider == null) {
			codeExpressionItemProvider = new CodeExpressionItemProvider(this);
		}

		return codeExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.ReferenceExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceExpressionItemProvider referenceExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.ReferenceExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceExpressionAdapter() {
		if (referenceExpressionItemProvider == null) {
			referenceExpressionItemProvider = new ReferenceExpressionItemProvider(this);
		}

		return referenceExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.LinkExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkExpressionItemProvider linkExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.LinkExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkExpressionAdapter() {
		if (linkExpressionItemProvider == null) {
			linkExpressionItemProvider = new LinkExpressionItemProvider(this);
		}

		return linkExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.ImageExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageExpressionItemProvider imageExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.ImageExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageExpressionAdapter() {
		if (imageExpressionItemProvider == null) {
			imageExpressionItemProvider = new ImageExpressionItemProvider(this);
		}

		return imageExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.VideoExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VideoExpressionItemProvider videoExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.VideoExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVideoExpressionAdapter() {
		if (videoExpressionItemProvider == null) {
			videoExpressionItemProvider = new VideoExpressionItemProvider(this);
		}

		return videoExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.HeaderDepth1Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeaderDepth1ExpressionItemProvider headerDepth1ExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.HeaderDepth1Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeaderDepth1ExpressionAdapter() {
		if (headerDepth1ExpressionItemProvider == null) {
			headerDepth1ExpressionItemProvider = new HeaderDepth1ExpressionItemProvider(this);
		}

		return headerDepth1ExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.HeaderDepth2Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeaderDepth2ExpressionItemProvider headerDepth2ExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.HeaderDepth2Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeaderDepth2ExpressionAdapter() {
		if (headerDepth2ExpressionItemProvider == null) {
			headerDepth2ExpressionItemProvider = new HeaderDepth2ExpressionItemProvider(this);
		}

		return headerDepth2ExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.HeaderDepth3Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeaderDepth3ExpressionItemProvider headerDepth3ExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.HeaderDepth3Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeaderDepth3ExpressionAdapter() {
		if (headerDepth3ExpressionItemProvider == null) {
			headerDepth3ExpressionItemProvider = new HeaderDepth3ExpressionItemProvider(this);
		}

		return headerDepth3ExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.HeaderDepth5Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeaderDepth5ExpressionItemProvider headerDepth5ExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.HeaderDepth5Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeaderDepth5ExpressionAdapter() {
		if (headerDepth5ExpressionItemProvider == null) {
			headerDepth5ExpressionItemProvider = new HeaderDepth5ExpressionItemProvider(this);
		}

		return headerDepth5ExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.HeaderDepth6Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeaderDepth6ExpressionItemProvider headerDepth6ExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.HeaderDepth6Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeaderDepth6ExpressionAdapter() {
		if (headerDepth6ExpressionItemProvider == null) {
			headerDepth6ExpressionItemProvider = new HeaderDepth6ExpressionItemProvider(this);
		}

		return headerDepth6ExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.HeaderDepth4Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeaderDepth4ExpressionItemProvider headerDepth4ExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.HeaderDepth4Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeaderDepth4ExpressionAdapter() {
		if (headerDepth4ExpressionItemProvider == null) {
			headerDepth4ExpressionItemProvider = new HeaderDepth4ExpressionItemProvider(this);
		}

		return headerDepth4ExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link markdown.TextualExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextualExpressionItemProvider textualExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link markdown.TextualExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextualExpressionAdapter() {
		if (textualExpressionItemProvider == null) {
			textualExpressionItemProvider = new TextualExpressionItemProvider(this);
		}

		return textualExpressionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (fileItemProvider != null)
			fileItemProvider.dispose();
		if (tableExpressionItemProvider != null)
			tableExpressionItemProvider.dispose();
		if (tableLineItemProvider != null)
			tableLineItemProvider.dispose();
		if (horizontalExpressionItemProvider != null)
			horizontalExpressionItemProvider.dispose();
		if (listExpressionItemProvider != null)
			listExpressionItemProvider.dispose();
		if (quoteExpressionItemProvider != null)
			quoteExpressionItemProvider.dispose();
		if (lineBreakExpressionItemProvider != null)
			lineBreakExpressionItemProvider.dispose();
		if (italicExpressionItemProvider != null)
			italicExpressionItemProvider.dispose();
		if (strongExpressionItemProvider != null)
			strongExpressionItemProvider.dispose();
		if (scratchExpressionItemProvider != null)
			scratchExpressionItemProvider.dispose();
		if (htmlExpressionItemProvider != null)
			htmlExpressionItemProvider.dispose();
		if (codeExpressionItemProvider != null)
			codeExpressionItemProvider.dispose();
		if (referenceExpressionItemProvider != null)
			referenceExpressionItemProvider.dispose();
		if (linkExpressionItemProvider != null)
			linkExpressionItemProvider.dispose();
		if (imageExpressionItemProvider != null)
			imageExpressionItemProvider.dispose();
		if (videoExpressionItemProvider != null)
			videoExpressionItemProvider.dispose();
		if (headerDepth1ExpressionItemProvider != null)
			headerDepth1ExpressionItemProvider.dispose();
		if (headerDepth2ExpressionItemProvider != null)
			headerDepth2ExpressionItemProvider.dispose();
		if (headerDepth3ExpressionItemProvider != null)
			headerDepth3ExpressionItemProvider.dispose();
		if (headerDepth5ExpressionItemProvider != null)
			headerDepth5ExpressionItemProvider.dispose();
		if (headerDepth6ExpressionItemProvider != null)
			headerDepth6ExpressionItemProvider.dispose();
		if (headerDepth4ExpressionItemProvider != null)
			headerDepth4ExpressionItemProvider.dispose();
		if (textualExpressionItemProvider != null)
			textualExpressionItemProvider.dispose();
	}

}
