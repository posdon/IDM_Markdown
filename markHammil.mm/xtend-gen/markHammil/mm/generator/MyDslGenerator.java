/**
 * generated by Xtext 2.12.0
 */
package markHammil.mm.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import markHammil.mm.myDsl.BreakLineExpression;
import markHammil.mm.myDsl.EmphasisExpression;
import markHammil.mm.myDsl.Expression;
import markHammil.mm.myDsl.File;
import markHammil.mm.myDsl.Header1Expression;
import markHammil.mm.myDsl.Header2Expression;
import markHammil.mm.myDsl.Header3Expression;
import markHammil.mm.myDsl.Header4Expression;
import markHammil.mm.myDsl.Header5Expression;
import markHammil.mm.myDsl.Header6Expression;
import markHammil.mm.myDsl.HeaderExpression;
import markHammil.mm.myDsl.HorizontalExpression;
import markHammil.mm.myDsl.ImageExpression;
import markHammil.mm.myDsl.ItalicExpression;
import markHammil.mm.myDsl.LineExpression;
import markHammil.mm.myDsl.LinkExpression;
import markHammil.mm.myDsl.ListExpression;
import markHammil.mm.myDsl.NaturalExpression;
import markHammil.mm.myDsl.QuoteExpression;
import markHammil.mm.myDsl.RefExpression;
import markHammil.mm.myDsl.ScratchExpression;
import markHammil.mm.myDsl.StrongExpression;
import markHammil.mm.myDsl.TabExpression;
import markHammil.mm.myDsl.TextExpression;
import markHammil.mm.myDsl.URLedExpression;
import markHammil.mm.myDsl.VideoExpression;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  public Map<String, String> references = new HashMap<String, String>();
  
  @Override
  public void doGenerate(final Resource res, final IFileSystemAccess2 fsa, final IGeneratorContext ctx) {
    fsa.generateFile(res.getURI().trimFileExtension().appendFileExtension("html").lastSegment(), 
      this.compile(IterableExtensions.<File>head(IteratorExtensions.<File>toIterable(Iterators.<File>filter(res.getAllContents(), File.class)))).toString());
  }
  
  protected CharSequence _compile(final File file) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!doctype html>");
    _builder.newLine();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<meta charset=\"utf-8\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<title>Auto generated markdown</title>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<style>");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("table {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("border-collapse: collapse;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("table, th, td {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("border: 1px solid black;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</style>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<body>");
    _builder.newLine();
    {
      EList<Expression> _expression = file.getExpression();
      for(final Expression exp : _expression) {
        _builder.append("\t");
        Object _compile = this.compile(exp);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  ");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final Expression expression) {
    StringConcatenation _builder = new StringConcatenation();
    Object _compile = this.compile(expression.getC());
    _builder.append(_compile);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compile(final HeaderExpression headerExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Should not be called : ");
    _builder.append(headerExpression);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compile(final TextExpression textExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Should not be call : ");
    _builder.append(textExpression);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compile(final ListExpression listExpression) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isEmpty = listExpression.getContentOrdered().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("<ol>");
        _builder.newLine();
        {
          EList<TextExpression> _contentOrdered = listExpression.getContentOrdered();
          for(final TextExpression elem : _contentOrdered) {
            _builder.append("\t");
            _builder.append("<li>");
            Object _compile = this.compile(elem);
            _builder.append(_compile, "\t");
            _builder.append("</li>");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("</ol>");
        _builder.newLine();
      }
    }
    {
      boolean _isEmpty_1 = listExpression.getContentUnordered().isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("<ul>");
        _builder.newLine();
        {
          EList<TextExpression> _contentUnordered = listExpression.getContentUnordered();
          for(final TextExpression elem_1 : _contentUnordered) {
            _builder.append("\t");
            _builder.append("<li>");
            Object _compile_1 = this.compile(elem_1);
            _builder.append(_compile_1, "\t");
            _builder.append("</li>");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("</ul>");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final QuoteExpression quoteExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p id=\"quote\">");
    _builder.newLine();
    {
      EList<TextExpression> _content = quoteExpression.getContent();
      for(final TextExpression quote : _content) {
        _builder.append("\t");
        Object _compile = this.compile(quote);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</p>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Singleton expressions
   * 	 br, hr ...
   */
  protected CharSequence _compile(final BreakLineExpression br) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<br>");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final HorizontalExpression horizontalExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<hr>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Emphasis expressions
   * 	 strong, italic, scratch...
   */
  protected CharSequence _compile(final EmphasisExpression emphasisExpression) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<EmphasisExpression> _c = emphasisExpression.getC();
      for(final EmphasisExpression exp : _c) {
        Object _compile = this.compile(exp);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final StrongExpression stringExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<strong>");
    Object _compile = this.compile(stringExpression.getContent());
    _builder.append(_compile);
    _builder.append("</strong>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compile(final ItalicExpression italicExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<em>");
    Object _compile = this.compile(italicExpression.getContent());
    _builder.append(_compile);
    _builder.append("</em>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compile(final ScratchExpression scratchExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<strike>");
    Object _compile = this.compile(scratchExpression.getContent());
    _builder.append(_compile);
    _builder.append("</strike>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compile(final NaturalExpression naturalExpression) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<String> _value = naturalExpression.getValue();
      for(final String value : _value) {
        String _string = value.toString();
        _builder.append(_string);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  /**
   * Header expressions
   * 	 From one to six
   */
  protected CharSequence _compile(final Header1Expression headerExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<h1>");
    _builder.newLine();
    {
      EList<EmphasisExpression> _title = headerExpression.getTitle();
      for(final EmphasisExpression head : _title) {
        _builder.append("\t");
        Object _compile = this.compile(head);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</h1>");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final Header2Expression headerExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<h2>");
    _builder.newLine();
    {
      EList<EmphasisExpression> _title = headerExpression.getTitle();
      for(final EmphasisExpression head : _title) {
        _builder.append("\t");
        Object _compile = this.compile(head);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</h2>");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final Header3Expression headerExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<h3>");
    _builder.newLine();
    {
      EList<EmphasisExpression> _title = headerExpression.getTitle();
      for(final EmphasisExpression head : _title) {
        _builder.append("\t");
        Object _compile = this.compile(head);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</h3>");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final Header4Expression headerExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<h4>");
    _builder.newLine();
    {
      EList<EmphasisExpression> _title = headerExpression.getTitle();
      for(final EmphasisExpression head : _title) {
        _builder.append("\t");
        Object _compile = this.compile(head);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</h4>");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final Header5Expression headerExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<h5>");
    _builder.newLine();
    {
      EList<EmphasisExpression> _title = headerExpression.getTitle();
      for(final EmphasisExpression head : _title) {
        _builder.append("\t");
        Object _compile = this.compile(head);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</h5>");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final Header6Expression headerExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<h6>");
    _builder.newLine();
    {
      EList<EmphasisExpression> _title = headerExpression.getTitle();
      for(final EmphasisExpression head : _title) {
        _builder.append("\t");
        Object _compile = this.compile(head);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</h6>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Tab expressions
   * 	 Lines, Separation...
   */
  protected CharSequence _compile(final TabExpression tabExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<table>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<thead>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<tr>");
    _builder.newLine();
    _builder.append("\t\t\t");
    Object _compile = this.compile(tabExpression.getHeader());
    _builder.append(_compile, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</thead>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<tbody>");
    _builder.newLine();
    {
      EList<LineExpression> _lines = tabExpression.getLines();
      for(final LineExpression line : _lines) {
        _builder.append("\t\t");
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        Object _compile_1 = this.compile(line);
        _builder.append(_compile_1, "\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("</tr>");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("</tbody>");
    _builder.newLine();
    _builder.append("</table>");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final LineExpression lineExpression) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<EmphasisExpression> _cells = lineExpression.getCells();
      for(final EmphasisExpression cell : _cells) {
        _builder.append("<td>");
        _builder.newLine();
        _builder.append("\t");
        Object _compile = this.compile(cell);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("</td>");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  /**
   * Links expressions
   * 	 Image, Ref, Video...
   */
  protected CharSequence _compile(final URLedExpression urlExp) {
    StringConcatenation _builder = new StringConcatenation();
    Object _compile = this.compile(urlExp.getC());
    _builder.append(_compile);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compile(final RefExpression refExpression) {
    return this.references.put(this.compile(refExpression.getRefName()).toString(), this.compile(refExpression.getRefContent()).toString());
  }
  
  protected CharSequence _compile(final LinkExpression linkExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<a href=\"");
    _builder.newLine();
    {
      EmphasisExpression _linkContent = linkExpression.getLinkContent();
      boolean _notEquals = (!Objects.equal(_linkContent, null));
      if (_notEquals) {
        Object _compile = this.compile(linkExpression.getLinkContent());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EmphasisExpression _refName = linkExpression.getRefName();
      boolean _notEquals_1 = (!Objects.equal(_refName, null));
      if (_notEquals_1) {
        {
          String _get = this.references.get(linkExpression.getRefName().toString());
          boolean _notEquals_2 = (!Objects.equal(_get, null));
          if (_notEquals_2) {
            _builder.append("references.get(linkExpression.refName.toString)");
            _builder.newLine();
          } else {
            _builder.append("linkExpression.refName.toString");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\">");
    Object _compile_1 = this.compile(linkExpression.getAltText());
    _builder.append(_compile_1);
    _builder.append("</a>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compile(final ImageExpression imageExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<img src=\"");
    Object _compile = this.compile(imageExpression.getLinkContent());
    _builder.append(_compile);
    _builder.append("\">");
    Object _compile_1 = this.compile(imageExpression.getAltText());
    _builder.append(_compile_1);
    _builder.append("</img>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compile(final VideoExpression videoExpression) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EObject italicExpression) {
    if (italicExpression instanceof ItalicExpression) {
      return _compile((ItalicExpression)italicExpression);
    } else if (italicExpression instanceof NaturalExpression) {
      return _compile((NaturalExpression)italicExpression);
    } else if (italicExpression instanceof ScratchExpression) {
      return _compile((ScratchExpression)italicExpression);
    } else if (italicExpression instanceof StrongExpression) {
      return _compile((StrongExpression)italicExpression);
    } else if (italicExpression instanceof EmphasisExpression) {
      return _compile((EmphasisExpression)italicExpression);
    } else if (italicExpression instanceof Header1Expression) {
      return _compile((Header1Expression)italicExpression);
    } else if (italicExpression instanceof Header2Expression) {
      return _compile((Header2Expression)italicExpression);
    } else if (italicExpression instanceof Header3Expression) {
      return _compile((Header3Expression)italicExpression);
    } else if (italicExpression instanceof Header4Expression) {
      return _compile((Header4Expression)italicExpression);
    } else if (italicExpression instanceof Header5Expression) {
      return _compile((Header5Expression)italicExpression);
    } else if (italicExpression instanceof Header6Expression) {
      return _compile((Header6Expression)italicExpression);
    } else if (italicExpression instanceof QuoteExpression) {
      return _compile((QuoteExpression)italicExpression);
    } else if (italicExpression instanceof TabExpression) {
      return _compile((TabExpression)italicExpression);
    } else if (italicExpression instanceof URLedExpression) {
      return _compile((URLedExpression)italicExpression);
    } else if (italicExpression instanceof BreakLineExpression) {
      return _compile((BreakLineExpression)italicExpression);
    } else if (italicExpression instanceof Expression) {
      return _compile((Expression)italicExpression);
    } else if (italicExpression instanceof File) {
      return _compile((File)italicExpression);
    } else if (italicExpression instanceof HeaderExpression) {
      return _compile((HeaderExpression)italicExpression);
    } else if (italicExpression instanceof HorizontalExpression) {
      return _compile((HorizontalExpression)italicExpression);
    } else if (italicExpression instanceof ImageExpression) {
      return _compile((ImageExpression)italicExpression);
    } else if (italicExpression instanceof LineExpression) {
      return _compile((LineExpression)italicExpression);
    } else if (italicExpression instanceof LinkExpression) {
      return _compile((LinkExpression)italicExpression);
    } else if (italicExpression instanceof ListExpression) {
      return _compile((ListExpression)italicExpression);
    } else if (italicExpression instanceof RefExpression) {
      return _compile((RefExpression)italicExpression);
    } else if (italicExpression instanceof TextExpression) {
      return _compile((TextExpression)italicExpression);
    } else if (italicExpression instanceof VideoExpression) {
      return _compile((VideoExpression)italicExpression);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(italicExpression).toString());
    }
  }
}
