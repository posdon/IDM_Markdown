/**
 * generated by Xtext 2.12.0
 */
package markHammil.mm.myDsl.impl;

import java.util.Collection;

import markHammil.mm.myDsl.LineExpression;
import markHammil.mm.myDsl.MyDslPackage;
import markHammil.mm.myDsl.TabExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Tab Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link markHammil.mm.myDsl.impl.TabExpressionImpl#getHeader <em>Header</em>}</li>
 *   <li>{@link markHammil.mm.myDsl.impl.TabExpressionImpl#getLines <em>Lines</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TabExpressionImpl extends TextExpressionImpl implements TabExpression
{
  /**
	 * The cached value of the '{@link #getHeader() <em>Header</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getHeader()
	 * @generated
	 * @ordered
	 */
  protected LineExpression header;

  /**
	 * The cached value of the '{@link #getLines() <em>Lines</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getLines()
	 * @generated
	 * @ordered
	 */
  protected EList<LineExpression> lines;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected TabExpressionImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return MyDslPackage.Literals.TAB_EXPRESSION;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public LineExpression getHeader()
  {
		return header;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetHeader(LineExpression newHeader, NotificationChain msgs)
  {
		LineExpression oldHeader = header;
		header = newHeader;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.TAB_EXPRESSION__HEADER, oldHeader, newHeader);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setHeader(LineExpression newHeader)
  {
		if (newHeader != header) {
			NotificationChain msgs = null;
			if (header != null)
				msgs = ((InternalEObject)header).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.TAB_EXPRESSION__HEADER, null, msgs);
			if (newHeader != null)
				msgs = ((InternalEObject)newHeader).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.TAB_EXPRESSION__HEADER, null, msgs);
			msgs = basicSetHeader(newHeader, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.TAB_EXPRESSION__HEADER, newHeader, newHeader));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public EList<LineExpression> getLines()
  {
		if (lines == null) {
			lines = new EObjectContainmentEList<LineExpression>(LineExpression.class, this, MyDslPackage.TAB_EXPRESSION__LINES);
		}
		return lines;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case MyDslPackage.TAB_EXPRESSION__HEADER:
				return basicSetHeader(null, msgs);
			case MyDslPackage.TAB_EXPRESSION__LINES:
				return ((InternalEList<?>)getLines()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case MyDslPackage.TAB_EXPRESSION__HEADER:
				return getHeader();
			case MyDslPackage.TAB_EXPRESSION__LINES:
				return getLines();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case MyDslPackage.TAB_EXPRESSION__HEADER:
				setHeader((LineExpression)newValue);
				return;
			case MyDslPackage.TAB_EXPRESSION__LINES:
				getLines().clear();
				getLines().addAll((Collection<? extends LineExpression>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case MyDslPackage.TAB_EXPRESSION__HEADER:
				setHeader((LineExpression)null);
				return;
			case MyDslPackage.TAB_EXPRESSION__LINES:
				getLines().clear();
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case MyDslPackage.TAB_EXPRESSION__HEADER:
				return header != null;
			case MyDslPackage.TAB_EXPRESSION__LINES:
				return lines != null && !lines.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //TabExpressionImpl
