/*
 * generated by Xtext 2.12.0
 */
package markHammil.mm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//File:
		//	{File} expression+=Expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//{File} expression+=Expression*
		public Group getGroup() { return cGroup; }
		
		//{File}
		public Action getFileAction_0() { return cFileAction_0; }
		
		//expression+=Expression*
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cCAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cCHeaderExpressionParserRuleCall_0_0_0_0 = (RuleCall)cCAssignment_0_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Assignment cCAssignment_0_0_1_0 = (Assignment)cGroup_0_0_1.eContents().get(0);
		private final RuleCall cCTextExpressionParserRuleCall_0_0_1_0_0 = (RuleCall)cCAssignment_0_0_1_0.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_0_0_1_1 = (RuleCall)cGroup_0_0_1.eContents().get(1);
		private final Assignment cCAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCBreakLineExpressionParserRuleCall_1_0 = (RuleCall)cCAssignment_1.eContents().get(0);
		
		//Expression:
		//	=> (=> c=HeaderExpression | c=TextExpression => BL?) | c=BreakLineExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (=> c=HeaderExpression | c=TextExpression => BL?) | c=BreakLineExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (=> c=HeaderExpression | c=TextExpression => BL?)
		public Group getGroup_0() { return cGroup_0; }
		
		//=> c=HeaderExpression | c=TextExpression => BL?
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//=> c=HeaderExpression
		public Assignment getCAssignment_0_0_0() { return cCAssignment_0_0_0; }
		
		//HeaderExpression
		public RuleCall getCHeaderExpressionParserRuleCall_0_0_0_0() { return cCHeaderExpressionParserRuleCall_0_0_0_0; }
		
		//c=TextExpression => BL?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//c=TextExpression
		public Assignment getCAssignment_0_0_1_0() { return cCAssignment_0_0_1_0; }
		
		//TextExpression
		public RuleCall getCTextExpressionParserRuleCall_0_0_1_0_0() { return cCTextExpressionParserRuleCall_0_0_1_0_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_0_0_1_1() { return cBLTerminalRuleCall_0_0_1_1; }
		
		//c=BreakLineExpression
		public Assignment getCAssignment_1() { return cCAssignment_1; }
		
		//BreakLineExpression
		public RuleCall getCBreakLineExpressionParserRuleCall_1_0() { return cCBreakLineExpressionParserRuleCall_1_0; }
	}
	public class BreakLineExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.BreakLineExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakLineExpressionBAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//BreakLineExpression:
		//	{BreakLineExpressionB} BL;
		@Override public ParserRule getRule() { return rule; }
		
		//{BreakLineExpressionB} BL
		public Group getGroup() { return cGroup; }
		
		//{BreakLineExpressionB}
		public Action getBreakLineExpressionBAction_0() { return cBreakLineExpressionBAction_0; }
		
		//BL
		public RuleCall getBLTerminalRuleCall_1() { return cBLTerminalRuleCall_1; }
	}
	public class TextExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.TextExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCEmphasisExpressionParserRuleCall_0_0 = (RuleCall)cCAssignment_0.eContents().get(0);
		private final Assignment cCAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCQuoteExpressionParserRuleCall_1_0 = (RuleCall)cCAssignment_1.eContents().get(0);
		
		//TextExpression:
		//	c+=EmphasisExpression | c+=QuoteExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//c+=EmphasisExpression | c+=QuoteExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//c+=EmphasisExpression
		public Assignment getCAssignment_0() { return cCAssignment_0; }
		
		//EmphasisExpression
		public RuleCall getCEmphasisExpressionParserRuleCall_0_0() { return cCEmphasisExpressionParserRuleCall_0_0; }
		
		//c+=QuoteExpression
		public Assignment getCAssignment_1() { return cCAssignment_1; }
		
		//QuoteExpression
		public RuleCall getCQuoteExpressionParserRuleCall_1_0() { return cCQuoteExpressionParserRuleCall_1_0; }
	}
	public class QuoteExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.QuoteExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentTextExpressionParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//QuoteExpression:
		//	{TextExpression}
		//	'>' content+=TextExpression+ => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TextExpression} '>' content+=TextExpression+ => BL?
		public Group getGroup() { return cGroup; }
		
		//{TextExpression}
		public Action getTextExpressionAction_0() { return cTextExpressionAction_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
		
		//content+=TextExpression+
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//TextExpression
		public RuleCall getContentTextExpressionParserRuleCall_2_0() { return cContentTextExpressionParserRuleCall_2_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_3() { return cBLTerminalRuleCall_3; }
	}
	public class HeaderExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.HeaderExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHeader1ExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHeader2ExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHeader3ExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHeader4ExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cHeader5ExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cHeader6ExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//HeaderExpression:
		//	Header1Expression | Header2Expression | Header3Expression | Header4Expression | Header5Expression | Header6Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Header1Expression | Header2Expression | Header3Expression | Header4Expression | Header5Expression | Header6Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Header1Expression
		public RuleCall getHeader1ExpressionParserRuleCall_0() { return cHeader1ExpressionParserRuleCall_0; }
		
		//Header2Expression
		public RuleCall getHeader2ExpressionParserRuleCall_1() { return cHeader2ExpressionParserRuleCall_1; }
		
		//Header3Expression
		public RuleCall getHeader3ExpressionParserRuleCall_2() { return cHeader3ExpressionParserRuleCall_2; }
		
		//Header4Expression
		public RuleCall getHeader4ExpressionParserRuleCall_3() { return cHeader4ExpressionParserRuleCall_3; }
		
		//Header5Expression
		public RuleCall getHeader5ExpressionParserRuleCall_4() { return cHeader5ExpressionParserRuleCall_4; }
		
		//Header6Expression
		public RuleCall getHeader6ExpressionParserRuleCall_5() { return cHeader6ExpressionParserRuleCall_5; }
	}
	public class Header1ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Header1Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeader1ExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Header1Expression:
		//	{Header1Expression}
		//	'#' title+=EmphasisExpression => ('#')* => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Header1Expression} '#' title+=EmphasisExpression => ('#')* => BL?
		public Group getGroup() { return cGroup; }
		
		//{Header1Expression}
		public Action getHeader1ExpressionAction_0() { return cHeader1ExpressionAction_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }
		
		//title+=EmphasisExpression
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_2_0() { return cTitleEmphasisExpressionParserRuleCall_2_0; }
		
		//=> ('#')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_4() { return cBLTerminalRuleCall_4; }
	}
	public class Header2ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Header2Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeader2ExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Header2Expression:
		//	{Header2Expression}
		//	'##' title+=EmphasisExpression => ('#')* => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Header2Expression} '##' title+=EmphasisExpression => ('#')* => BL?
		public Group getGroup() { return cGroup; }
		
		//{Header2Expression}
		public Action getHeader2ExpressionAction_0() { return cHeader2ExpressionAction_0; }
		
		//'##'
		public Keyword getNumberSignNumberSignKeyword_1() { return cNumberSignNumberSignKeyword_1; }
		
		//title+=EmphasisExpression
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_2_0() { return cTitleEmphasisExpressionParserRuleCall_2_0; }
		
		//=> ('#')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_4() { return cBLTerminalRuleCall_4; }
	}
	public class Header3ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Header3Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeader3ExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignNumberSignNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Header3Expression:
		//	{Header3Expression}
		//	'###' title+=EmphasisExpression => ('#')* => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Header3Expression} '###' title+=EmphasisExpression => ('#')* => BL?
		public Group getGroup() { return cGroup; }
		
		//{Header3Expression}
		public Action getHeader3ExpressionAction_0() { return cHeader3ExpressionAction_0; }
		
		//'###'
		public Keyword getNumberSignNumberSignNumberSignKeyword_1() { return cNumberSignNumberSignNumberSignKeyword_1; }
		
		//title+=EmphasisExpression
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_2_0() { return cTitleEmphasisExpressionParserRuleCall_2_0; }
		
		//=> ('#')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_4() { return cBLTerminalRuleCall_4; }
	}
	public class Header4ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Header4Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeader4ExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignNumberSignNumberSignNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Header4Expression:
		//	{Header4Expression}
		//	'####' title+=EmphasisExpression => ('#')* => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Header4Expression} '####' title+=EmphasisExpression => ('#')* => BL?
		public Group getGroup() { return cGroup; }
		
		//{Header4Expression}
		public Action getHeader4ExpressionAction_0() { return cHeader4ExpressionAction_0; }
		
		//'####'
		public Keyword getNumberSignNumberSignNumberSignNumberSignKeyword_1() { return cNumberSignNumberSignNumberSignNumberSignKeyword_1; }
		
		//title+=EmphasisExpression
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_2_0() { return cTitleEmphasisExpressionParserRuleCall_2_0; }
		
		//=> ('#')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_4() { return cBLTerminalRuleCall_4; }
	}
	public class Header5ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Header5Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeader5ExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Header5Expression:
		//	{Header5Expression}
		//	'#####' title+=EmphasisExpression => ('#')* => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Header5Expression} '#####' title+=EmphasisExpression => ('#')* => BL?
		public Group getGroup() { return cGroup; }
		
		//{Header5Expression}
		public Action getHeader5ExpressionAction_0() { return cHeader5ExpressionAction_0; }
		
		//'#####'
		public Keyword getNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_1() { return cNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_1; }
		
		//title+=EmphasisExpression
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_2_0() { return cTitleEmphasisExpressionParserRuleCall_2_0; }
		
		//=> ('#')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_4() { return cBLTerminalRuleCall_4; }
	}
	public class Header6ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Header6Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeader6ExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Header6Expression:
		//	{Header6Expression}
		//	'######' title+=EmphasisExpression => ('#')* => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Header6Expression} '######' title+=EmphasisExpression => ('#')* => BL?
		public Group getGroup() { return cGroup; }
		
		//{Header6Expression}
		public Action getHeader6ExpressionAction_0() { return cHeader6ExpressionAction_0; }
		
		//'######'
		public Keyword getNumberSignNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_1() { return cNumberSignNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_1; }
		
		//title+=EmphasisExpression
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_2_0() { return cTitleEmphasisExpressionParserRuleCall_2_0; }
		
		//=> ('#')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_4() { return cBLTerminalRuleCall_4; }
	}
	public class EmphasisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.EmphasisExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cCAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cCStrongExpressionParserRuleCall_0_0_0_0 = (RuleCall)cCAssignment_0_0_0.eContents().get(0);
		private final Assignment cCAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cCItalicExpressionParserRuleCall_0_0_1_0 = (RuleCall)cCAssignment_0_0_1.eContents().get(0);
		private final Assignment cCAssignment_0_0_2 = (Assignment)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cCScratchExpressionParserRuleCall_0_0_2_0 = (RuleCall)cCAssignment_0_0_2.eContents().get(0);
		private final Assignment cCAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCNaturalExpressionParserRuleCall_1_0 = (RuleCall)cCAssignment_1.eContents().get(0);
		
		//EmphasisExpression:
		//	(=> (=> c+=StrongExpression | c+=ItalicExpression | c+=ScratchExpression) | c+=NaturalExpression)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(=> (=> c+=StrongExpression | c+=ItalicExpression | c+=ScratchExpression) | c+=NaturalExpression)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (=> c+=StrongExpression | c+=ItalicExpression | c+=ScratchExpression)
		public Group getGroup_0() { return cGroup_0; }
		
		//=> c+=StrongExpression | c+=ItalicExpression | c+=ScratchExpression
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//=> c+=StrongExpression
		public Assignment getCAssignment_0_0_0() { return cCAssignment_0_0_0; }
		
		//StrongExpression
		public RuleCall getCStrongExpressionParserRuleCall_0_0_0_0() { return cCStrongExpressionParserRuleCall_0_0_0_0; }
		
		//c+=ItalicExpression
		public Assignment getCAssignment_0_0_1() { return cCAssignment_0_0_1; }
		
		//ItalicExpression
		public RuleCall getCItalicExpressionParserRuleCall_0_0_1_0() { return cCItalicExpressionParserRuleCall_0_0_1_0; }
		
		//c+=ScratchExpression
		public Assignment getCAssignment_0_0_2() { return cCAssignment_0_0_2; }
		
		//ScratchExpression
		public RuleCall getCScratchExpressionParserRuleCall_0_0_2_0() { return cCScratchExpressionParserRuleCall_0_0_2_0; }
		
		//c+=NaturalExpression
		public Assignment getCAssignment_1() { return cCAssignment_1; }
		
		//NaturalExpression
		public RuleCall getCNaturalExpressionParserRuleCall_1_0() { return cCNaturalExpressionParserRuleCall_1_0; }
	}
	public class StrongExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.StrongExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStrongExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StrongExpression EmphasisExpression hidden():
		//	{StrongExpression}
		//	'**' content=EmphasisExpression '**';
		@Override public ParserRule getRule() { return rule; }
		
		//{StrongExpression} '**' content=EmphasisExpression '**'
		public Group getGroup() { return cGroup; }
		
		//{StrongExpression}
		public Action getStrongExpressionAction_0() { return cStrongExpressionAction_0; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_1() { return cAsteriskAsteriskKeyword_1; }
		
		//content=EmphasisExpression
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getContentEmphasisExpressionParserRuleCall_2_0() { return cContentEmphasisExpressionParserRuleCall_2_0; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_3() { return cAsteriskAsteriskKeyword_3; }
	}
	public class ItalicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.ItalicExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cItalicExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ItalicExpression EmphasisExpression hidden():
		//	{ItalicExpression}
		//	'*' content=EmphasisExpression '*';
		@Override public ParserRule getRule() { return rule; }
		
		//{ItalicExpression} '*' content=EmphasisExpression '*'
		public Group getGroup() { return cGroup; }
		
		//{ItalicExpression}
		public Action getItalicExpressionAction_0() { return cItalicExpressionAction_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
		
		//content=EmphasisExpression
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getContentEmphasisExpressionParserRuleCall_2_0() { return cContentEmphasisExpressionParserRuleCall_2_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }
	}
	public class ScratchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.ScratchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScratchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTildeTildeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cTildeTildeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ScratchExpression EmphasisExpression hidden():
		//	{ScratchExpression}
		//	'~~' content=EmphasisExpression '~~';
		@Override public ParserRule getRule() { return rule; }
		
		//{ScratchExpression} '~~' content=EmphasisExpression '~~'
		public Group getGroup() { return cGroup; }
		
		//{ScratchExpression}
		public Action getScratchExpressionAction_0() { return cScratchExpressionAction_0; }
		
		//'~~'
		public Keyword getTildeTildeKeyword_1() { return cTildeTildeKeyword_1; }
		
		//content=EmphasisExpression
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getContentEmphasisExpressionParserRuleCall_2_0() { return cContentEmphasisExpressionParserRuleCall_2_0; }
		
		//'~~'
		public Keyword getTildeTildeKeyword_3() { return cTildeTildeKeyword_3; }
	}
	public class NaturalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.NaturalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmphasisExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueContentParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NaturalExpression EmphasisExpression:
		//	{EmphasisExpression} value+=Content;
		@Override public ParserRule getRule() { return rule; }
		
		//{EmphasisExpression} value+=Content
		public Group getGroup() { return cGroup; }
		
		//{EmphasisExpression}
		public Action getEmphasisExpressionAction_0() { return cEmphasisExpressionAction_0; }
		
		//value+=Content
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Content
		public RuleCall getValueContentParserRuleCall_1_0() { return cValueContentParserRuleCall_1_0; }
	}
	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Content");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cApostropheKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cVerticalLineKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cQuotationMarkKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//Content:
		//	ID | STRING | INT | "\'" | "-" | "|" | '\"';
		@Override public ParserRule getRule() { return rule; }
		
		//ID | STRING | INT | "\'" | "-" | "|" | '\"'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//"\'"
		public Keyword getApostropheKeyword_3() { return cApostropheKeyword_3; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_4() { return cHyphenMinusKeyword_4; }
		
		//"|"
		public Keyword getVerticalLineKeyword_5() { return cVerticalLineKeyword_5; }
		
		//'\"'
		public Keyword getQuotationMarkKeyword_6() { return cQuotationMarkKeyword_6; }
	}
	
	
	private final FileElements pFile;
	private final ExpressionElements pExpression;
	private final BreakLineExpressionElements pBreakLineExpression;
	private final TextExpressionElements pTextExpression;
	private final QuoteExpressionElements pQuoteExpression;
	private final HeaderExpressionElements pHeaderExpression;
	private final Header1ExpressionElements pHeader1Expression;
	private final Header2ExpressionElements pHeader2Expression;
	private final Header3ExpressionElements pHeader3Expression;
	private final Header4ExpressionElements pHeader4Expression;
	private final Header5ExpressionElements pHeader5Expression;
	private final Header6ExpressionElements pHeader6Expression;
	private final EmphasisExpressionElements pEmphasisExpression;
	private final StrongExpressionElements pStrongExpression;
	private final ItalicExpressionElements pItalicExpression;
	private final ScratchExpressionElements pScratchExpression;
	private final NaturalExpressionElements pNaturalExpression;
	private final ContentElements pContent;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tBL;
	private final TerminalRule tWS;
	private final TerminalRule tDIGIT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFile = new FileElements();
		this.pExpression = new ExpressionElements();
		this.pBreakLineExpression = new BreakLineExpressionElements();
		this.pTextExpression = new TextExpressionElements();
		this.pQuoteExpression = new QuoteExpressionElements();
		this.pHeaderExpression = new HeaderExpressionElements();
		this.pHeader1Expression = new Header1ExpressionElements();
		this.pHeader2Expression = new Header2ExpressionElements();
		this.pHeader3Expression = new Header3ExpressionElements();
		this.pHeader4Expression = new Header4ExpressionElements();
		this.pHeader5Expression = new Header5ExpressionElements();
		this.pHeader6Expression = new Header6ExpressionElements();
		this.pEmphasisExpression = new EmphasisExpressionElements();
		this.pStrongExpression = new StrongExpressionElements();
		this.pItalicExpression = new ItalicExpressionElements();
		this.pScratchExpression = new ScratchExpressionElements();
		this.pNaturalExpression = new NaturalExpressionElements();
		this.pContent = new ContentElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.SL_COMMENT");
		this.tBL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.BL");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.WS");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.DIGIT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("markHammil.mm.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//File:
	//	{File} expression+=Expression*;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//Expression:
	//	=> (=> c=HeaderExpression | c=TextExpression => BL?) | c=BreakLineExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//BreakLineExpression:
	//	{BreakLineExpressionB} BL;
	public BreakLineExpressionElements getBreakLineExpressionAccess() {
		return pBreakLineExpression;
	}
	
	public ParserRule getBreakLineExpressionRule() {
		return getBreakLineExpressionAccess().getRule();
	}
	
	//TextExpression:
	//	c+=EmphasisExpression | c+=QuoteExpression;
	public TextExpressionElements getTextExpressionAccess() {
		return pTextExpression;
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}
	
	//QuoteExpression:
	//	{TextExpression}
	//	'>' content+=TextExpression+ => BL?;
	public QuoteExpressionElements getQuoteExpressionAccess() {
		return pQuoteExpression;
	}
	
	public ParserRule getQuoteExpressionRule() {
		return getQuoteExpressionAccess().getRule();
	}
	
	//HeaderExpression:
	//	Header1Expression | Header2Expression | Header3Expression | Header4Expression | Header5Expression | Header6Expression;
	public HeaderExpressionElements getHeaderExpressionAccess() {
		return pHeaderExpression;
	}
	
	public ParserRule getHeaderExpressionRule() {
		return getHeaderExpressionAccess().getRule();
	}
	
	//Header1Expression:
	//	{Header1Expression}
	//	'#' title+=EmphasisExpression => ('#')* => BL?;
	public Header1ExpressionElements getHeader1ExpressionAccess() {
		return pHeader1Expression;
	}
	
	public ParserRule getHeader1ExpressionRule() {
		return getHeader1ExpressionAccess().getRule();
	}
	
	//Header2Expression:
	//	{Header2Expression}
	//	'##' title+=EmphasisExpression => ('#')* => BL?;
	public Header2ExpressionElements getHeader2ExpressionAccess() {
		return pHeader2Expression;
	}
	
	public ParserRule getHeader2ExpressionRule() {
		return getHeader2ExpressionAccess().getRule();
	}
	
	//Header3Expression:
	//	{Header3Expression}
	//	'###' title+=EmphasisExpression => ('#')* => BL?;
	public Header3ExpressionElements getHeader3ExpressionAccess() {
		return pHeader3Expression;
	}
	
	public ParserRule getHeader3ExpressionRule() {
		return getHeader3ExpressionAccess().getRule();
	}
	
	//Header4Expression:
	//	{Header4Expression}
	//	'####' title+=EmphasisExpression => ('#')* => BL?;
	public Header4ExpressionElements getHeader4ExpressionAccess() {
		return pHeader4Expression;
	}
	
	public ParserRule getHeader4ExpressionRule() {
		return getHeader4ExpressionAccess().getRule();
	}
	
	//Header5Expression:
	//	{Header5Expression}
	//	'#####' title+=EmphasisExpression => ('#')* => BL?;
	public Header5ExpressionElements getHeader5ExpressionAccess() {
		return pHeader5Expression;
	}
	
	public ParserRule getHeader5ExpressionRule() {
		return getHeader5ExpressionAccess().getRule();
	}
	
	//Header6Expression:
	//	{Header6Expression}
	//	'######' title+=EmphasisExpression => ('#')* => BL?;
	public Header6ExpressionElements getHeader6ExpressionAccess() {
		return pHeader6Expression;
	}
	
	public ParserRule getHeader6ExpressionRule() {
		return getHeader6ExpressionAccess().getRule();
	}
	
	//EmphasisExpression:
	//	(=> (=> c+=StrongExpression | c+=ItalicExpression | c+=ScratchExpression) | c+=NaturalExpression)+;
	public EmphasisExpressionElements getEmphasisExpressionAccess() {
		return pEmphasisExpression;
	}
	
	public ParserRule getEmphasisExpressionRule() {
		return getEmphasisExpressionAccess().getRule();
	}
	
	//StrongExpression EmphasisExpression hidden():
	//	{StrongExpression}
	//	'**' content=EmphasisExpression '**';
	public StrongExpressionElements getStrongExpressionAccess() {
		return pStrongExpression;
	}
	
	public ParserRule getStrongExpressionRule() {
		return getStrongExpressionAccess().getRule();
	}
	
	//ItalicExpression EmphasisExpression hidden():
	//	{ItalicExpression}
	//	'*' content=EmphasisExpression '*';
	public ItalicExpressionElements getItalicExpressionAccess() {
		return pItalicExpression;
	}
	
	public ParserRule getItalicExpressionRule() {
		return getItalicExpressionAccess().getRule();
	}
	
	//ScratchExpression EmphasisExpression hidden():
	//	{ScratchExpression}
	//	'~~' content=EmphasisExpression '~~';
	public ScratchExpressionElements getScratchExpressionAccess() {
		return pScratchExpression;
	}
	
	public ParserRule getScratchExpressionRule() {
		return getScratchExpressionAccess().getRule();
	}
	
	//NaturalExpression EmphasisExpression:
	//	{EmphasisExpression} value+=Content;
	public NaturalExpressionElements getNaturalExpressionAccess() {
		return pNaturalExpression;
	}
	
	public ParserRule getNaturalExpressionRule() {
		return getNaturalExpressionAccess().getRule();
	}
	
	//Content:
	//	ID | STRING | INT | "\'" | "-" | "|" | '\"';
	public ContentElements getContentAccess() {
		return pContent;
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal BL:
	//	'\r'? '\n';
	public TerminalRule getBLRule() {
		return tBL;
	}
	
	//terminal WS:
	//	' ' | '\t';
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
