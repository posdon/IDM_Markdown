/*
 * generated by Xtext 2.12.0
 */
package markHammil.mm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//File:
		//	{File} expression+=Expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//{File} expression+=Expression*
		public Group getGroup() { return cGroup; }
		
		//{File}
		public Action getFileAction_0() { return cFileAction_0; }
		
		//expression+=Expression*
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cCAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cCHeaderExpressionParserRuleCall_0_0_0_0 = (RuleCall)cCAssignment_0_0_0.eContents().get(0);
		private final Assignment cCAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cCBreakLineExpressionParserRuleCall_0_0_1_0 = (RuleCall)cCAssignment_0_0_1.eContents().get(0);
		private final Assignment cCAssignment_0_0_2 = (Assignment)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cCRefExpressionParserRuleCall_0_0_2_0 = (RuleCall)cCAssignment_0_0_2.eContents().get(0);
		private final Group cGroup_0_0_3 = (Group)cAlternatives_0_0.eContents().get(3);
		private final Assignment cCAssignment_0_0_3_0 = (Assignment)cGroup_0_0_3.eContents().get(0);
		private final RuleCall cCHorizontalExpressionParserRuleCall_0_0_3_0_0 = (RuleCall)cCAssignment_0_0_3_0.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_0_0_3_1 = (RuleCall)cGroup_0_0_3.eContents().get(1);
		private final Group cGroup_0_0_4 = (Group)cAlternatives_0_0.eContents().get(4);
		private final Assignment cCAssignment_0_0_4_0 = (Assignment)cGroup_0_0_4.eContents().get(0);
		private final RuleCall cCListExpressionParserRuleCall_0_0_4_0_0 = (RuleCall)cCAssignment_0_0_4_0.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_0_0_4_1 = (RuleCall)cGroup_0_0_4.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cCAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCTextExpressionParserRuleCall_1_0_0 = (RuleCall)cCAssignment_1_0.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Expression:
		//	=> (c=HeaderExpression | c=BreakLineExpression | c=RefExpression | => c=HorizontalExpression => BL? | c=ListExpression
		//	=> BL?) | c=TextExpression => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (c=HeaderExpression | c=BreakLineExpression | c=RefExpression | => c=HorizontalExpression => BL? | c=ListExpression
		//=> BL?) | c=TextExpression => BL?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (c=HeaderExpression | c=BreakLineExpression | c=RefExpression | => c=HorizontalExpression => BL? | c=ListExpression
		//=> BL?)
		public Group getGroup_0() { return cGroup_0; }
		
		//c=HeaderExpression | c=BreakLineExpression | c=RefExpression | => c=HorizontalExpression => BL? | c=ListExpression =>
		//BL?
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//c=HeaderExpression
		public Assignment getCAssignment_0_0_0() { return cCAssignment_0_0_0; }
		
		//HeaderExpression
		public RuleCall getCHeaderExpressionParserRuleCall_0_0_0_0() { return cCHeaderExpressionParserRuleCall_0_0_0_0; }
		
		//c=BreakLineExpression
		public Assignment getCAssignment_0_0_1() { return cCAssignment_0_0_1; }
		
		//BreakLineExpression
		public RuleCall getCBreakLineExpressionParserRuleCall_0_0_1_0() { return cCBreakLineExpressionParserRuleCall_0_0_1_0; }
		
		//c=RefExpression
		public Assignment getCAssignment_0_0_2() { return cCAssignment_0_0_2; }
		
		//RefExpression
		public RuleCall getCRefExpressionParserRuleCall_0_0_2_0() { return cCRefExpressionParserRuleCall_0_0_2_0; }
		
		//=> c=HorizontalExpression => BL?
		public Group getGroup_0_0_3() { return cGroup_0_0_3; }
		
		//=> c=HorizontalExpression
		public Assignment getCAssignment_0_0_3_0() { return cCAssignment_0_0_3_0; }
		
		//HorizontalExpression
		public RuleCall getCHorizontalExpressionParserRuleCall_0_0_3_0_0() { return cCHorizontalExpressionParserRuleCall_0_0_3_0_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_0_0_3_1() { return cBLTerminalRuleCall_0_0_3_1; }
		
		//c=ListExpression => BL?
		public Group getGroup_0_0_4() { return cGroup_0_0_4; }
		
		//c=ListExpression
		public Assignment getCAssignment_0_0_4_0() { return cCAssignment_0_0_4_0; }
		
		//ListExpression
		public RuleCall getCListExpressionParserRuleCall_0_0_4_0_0() { return cCListExpressionParserRuleCall_0_0_4_0_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_0_0_4_1() { return cBLTerminalRuleCall_0_0_4_1; }
		
		//c=TextExpression => BL?
		public Group getGroup_1() { return cGroup_1; }
		
		//c=TextExpression
		public Assignment getCAssignment_1_0() { return cCAssignment_1_0; }
		
		//TextExpression
		public RuleCall getCTextExpressionParserRuleCall_1_0_0() { return cCTextExpressionParserRuleCall_1_0_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_1_1() { return cBLTerminalRuleCall_1_1; }
	}
	public class BreakLineExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.BreakLineExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakLineExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//BreakLineExpression:
		//	{BreakLineExpression} BL;
		@Override public ParserRule getRule() { return rule; }
		
		//{BreakLineExpression} BL
		public Group getGroup() { return cGroup; }
		
		//{BreakLineExpression}
		public Action getBreakLineExpressionAction_0() { return cBreakLineExpressionAction_0; }
		
		//BL
		public RuleCall getBLTerminalRuleCall_1() { return cBLTerminalRuleCall_1; }
	}
	public class HorizontalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.HorizontalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHorizontalExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword c_Keyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cAsteriskKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword c_Keyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cAsteriskKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword c_Keyword_3_2 = (Keyword)cAlternatives_3.eContents().get(2);
		
		//HorizontalExpression:
		//	{HorizontalExpression} ('-' | '*' | '_') ('-' | '*' | '_') ('-' | '*' | '_')+;
		@Override public ParserRule getRule() { return rule; }
		
		//{HorizontalExpression} ('-' | '*' | '_') ('-' | '*' | '_') ('-' | '*' | '_')+
		public Group getGroup() { return cGroup; }
		
		//{HorizontalExpression}
		public Action getHorizontalExpressionAction_0() { return cHorizontalExpressionAction_0; }
		
		//'-' | '*' | '_'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//'_'
		public Keyword get_Keyword_1_2() { return c_Keyword_1_2; }
		
		//'-' | '*' | '_'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_0() { return cHyphenMinusKeyword_2_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_1() { return cAsteriskKeyword_2_1; }
		
		//'_'
		public Keyword get_Keyword_2_2() { return c_Keyword_2_2; }
		
		//('-' | '*' | '_')+
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_0() { return cHyphenMinusKeyword_3_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_3_1() { return cAsteriskKeyword_3_1; }
		
		//'_'
		public Keyword get_Keyword_3_2() { return c_Keyword_3_2; }
	}
	public class TextExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.TextExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cURLedExpressionParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cTabExpressionParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cQuoteExpressionParserRuleCall_0_0_2 = (RuleCall)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cEmphasisExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TextExpression hidden(WS):
		//	=> (=> URLedExpression | TabExpression | QuoteExpression) | EmphasisExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (=> URLedExpression | TabExpression | QuoteExpression) | EmphasisExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (=> URLedExpression | TabExpression | QuoteExpression)
		public Group getGroup_0() { return cGroup_0; }
		
		//=> URLedExpression | TabExpression | QuoteExpression
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//=> URLedExpression
		public RuleCall getURLedExpressionParserRuleCall_0_0_0() { return cURLedExpressionParserRuleCall_0_0_0; }
		
		//TabExpression
		public RuleCall getTabExpressionParserRuleCall_0_0_1() { return cTabExpressionParserRuleCall_0_0_1; }
		
		//QuoteExpression
		public RuleCall getQuoteExpressionParserRuleCall_0_0_2() { return cQuoteExpressionParserRuleCall_0_0_2; }
		
		//EmphasisExpression
		public RuleCall getEmphasisExpressionParserRuleCall_1() { return cEmphasisExpressionParserRuleCall_1; }
	}
	public class URLedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.URLedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cURLedExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Assignment cCAssignment_1_0_0_0 = (Assignment)cAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cCImageExpressionParserRuleCall_1_0_0_0_0 = (RuleCall)cCAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cCAssignment_1_0_0_1 = (Assignment)cAlternatives_1_0_0.eContents().get(1);
		private final RuleCall cCVideoExpressionParserRuleCall_1_0_0_1_0 = (RuleCall)cCAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cCAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cCLinkExpressionParserRuleCall_1_1_0 = (RuleCall)cCAssignment_1_1.eContents().get(0);
		
		//URLedExpression:
		//	{URLedExpression} (=> (c=ImageExpression | => c=VideoExpression) | c=LinkExpression);
		@Override public ParserRule getRule() { return rule; }
		
		//{URLedExpression} (=> (c=ImageExpression | => c=VideoExpression) | c=LinkExpression)
		public Group getGroup() { return cGroup; }
		
		//{URLedExpression}
		public Action getURLedExpressionAction_0() { return cURLedExpressionAction_0; }
		
		//=> (c=ImageExpression | => c=VideoExpression) | c=LinkExpression
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=> (c=ImageExpression | => c=VideoExpression)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//c=ImageExpression | => c=VideoExpression
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//c=ImageExpression
		public Assignment getCAssignment_1_0_0_0() { return cCAssignment_1_0_0_0; }
		
		//ImageExpression
		public RuleCall getCImageExpressionParserRuleCall_1_0_0_0_0() { return cCImageExpressionParserRuleCall_1_0_0_0_0; }
		
		//=> c=VideoExpression
		public Assignment getCAssignment_1_0_0_1() { return cCAssignment_1_0_0_1; }
		
		//VideoExpression
		public RuleCall getCVideoExpressionParserRuleCall_1_0_0_1_0() { return cCVideoExpressionParserRuleCall_1_0_0_1_0; }
		
		//c=LinkExpression
		public Assignment getCAssignment_1_1() { return cCAssignment_1_1; }
		
		//LinkExpression
		public RuleCall getCLinkExpressionParserRuleCall_1_1_0() { return cCLinkExpressionParserRuleCall_1_1_0; }
	}
	public class ListExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.ListExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cListExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1_0 = (Alternatives)cGroup_0_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1_0_0 = (Keyword)cAlternatives_0_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1_0_1 = (Keyword)cAlternatives_0_1_0.eContents().get(1);
		private final Keyword cPlusSignKeyword_0_1_0_2 = (Keyword)cAlternatives_0_1_0.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Assignment cContentUnorderedAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cContentUnorderedTextExpressionParserRuleCall_0_1_2_0 = (RuleCall)cContentUnorderedAssignment_0_1_2.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_0_1_3 = (RuleCall)cGroup_0_1.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cContentOrderedAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cContentOrderedTextExpressionParserRuleCall_1_3_0 = (RuleCall)cContentOrderedAssignment_1_3.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		
		//ListExpression hidden():
		//	{ListExpression} (('*' | '-' | '+') WS+ contentUnordered+=TextExpression => BL?)+ | (INT '.' WS+
		//	contentOrdered+=TextExpression => BL?)+;
		@Override public ParserRule getRule() { return rule; }
		
		//{ListExpression} (('*' | '-' | '+') WS+ contentUnordered+=TextExpression => BL?)+ | (INT '.' WS+
		//contentOrdered+=TextExpression => BL?)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ListExpression} (('*' | '-' | '+') WS+ contentUnordered+=TextExpression => BL?)+
		public Group getGroup_0() { return cGroup_0; }
		
		//{ListExpression}
		public Action getListExpressionAction_0_0() { return cListExpressionAction_0_0; }
		
		//(('*' | '-' | '+') WS+ contentUnordered+=TextExpression => BL?)+
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'*' | '-' | '+'
		public Alternatives getAlternatives_0_1_0() { return cAlternatives_0_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_1_0_0() { return cAsteriskKeyword_0_1_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1_0_1() { return cHyphenMinusKeyword_0_1_0_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_1_0_2() { return cPlusSignKeyword_0_1_0_2; }
		
		//WS+
		public RuleCall getWSTerminalRuleCall_0_1_1() { return cWSTerminalRuleCall_0_1_1; }
		
		//contentUnordered+=TextExpression
		public Assignment getContentUnorderedAssignment_0_1_2() { return cContentUnorderedAssignment_0_1_2; }
		
		//TextExpression
		public RuleCall getContentUnorderedTextExpressionParserRuleCall_0_1_2_0() { return cContentUnorderedTextExpressionParserRuleCall_0_1_2_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_0_1_3() { return cBLTerminalRuleCall_0_1_3; }
		
		//(INT '.' WS+ contentOrdered+=TextExpression => BL?)+
		public Group getGroup_1() { return cGroup_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//WS+
		public RuleCall getWSTerminalRuleCall_1_2() { return cWSTerminalRuleCall_1_2; }
		
		//contentOrdered+=TextExpression
		public Assignment getContentOrderedAssignment_1_3() { return cContentOrderedAssignment_1_3; }
		
		//TextExpression
		public RuleCall getContentOrderedTextExpressionParserRuleCall_1_3_0() { return cContentOrderedTextExpressionParserRuleCall_1_3_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_1_4() { return cBLTerminalRuleCall_1_4; }
	}
	public class QuoteExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.QuoteExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuoteExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentTextExpressionParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//QuoteExpression:
		//	{QuoteExpression}
		//	=> '>' content+=TextExpression+ => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{QuoteExpression} => '>' content+=TextExpression+ => BL?
		public Group getGroup() { return cGroup; }
		
		//{QuoteExpression}
		public Action getQuoteExpressionAction_0() { return cQuoteExpressionAction_0; }
		
		//=> '>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
		
		//content+=TextExpression+
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//TextExpression
		public RuleCall getContentTextExpressionParserRuleCall_2_0() { return cContentTextExpressionParserRuleCall_2_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_3() { return cBLTerminalRuleCall_3; }
	}
	public class TabExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.TabExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTabExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cHeaderAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cHeaderLineExpressionParserRuleCall_1_0_0_0 = (RuleCall)cHeaderAssignment_1_0_0.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cTabSeparationParserRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_0_3_0 = (Group)cGroup_1_0_3.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_1_0_3_0_0 = (RuleCall)cGroup_1_0_3_0.eContents().get(0);
		private final Assignment cLinesAssignment_1_0_3_0_1 = (Assignment)cGroup_1_0_3_0.eContents().get(1);
		private final RuleCall cLinesLineExpressionParserRuleCall_1_0_3_0_1_0 = (RuleCall)cLinesAssignment_1_0_3_0_1.eContents().get(0);
		
		///***************************
		// * 
		// * 	 Tab expressions
		// *	 Lines, Separation...
		// *
		// * *********************** */ TabExpression:
		//	{TabExpression}
		//	=> (header=LineExpression BL TabSeparation => (BL => lines+=LineExpression)*);
		@Override public ParserRule getRule() { return rule; }
		
		//{TabExpression} => (header=LineExpression BL TabSeparation => (BL => lines+=LineExpression)*)
		public Group getGroup() { return cGroup; }
		
		//{TabExpression}
		public Action getTabExpressionAction_0() { return cTabExpressionAction_0; }
		
		//=> (header=LineExpression BL TabSeparation => (BL => lines+=LineExpression)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//header=LineExpression BL TabSeparation => (BL => lines+=LineExpression)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//header=LineExpression
		public Assignment getHeaderAssignment_1_0_0() { return cHeaderAssignment_1_0_0; }
		
		//LineExpression
		public RuleCall getHeaderLineExpressionParserRuleCall_1_0_0_0() { return cHeaderLineExpressionParserRuleCall_1_0_0_0; }
		
		//BL
		public RuleCall getBLTerminalRuleCall_1_0_1() { return cBLTerminalRuleCall_1_0_1; }
		
		//TabSeparation
		public RuleCall getTabSeparationParserRuleCall_1_0_2() { return cTabSeparationParserRuleCall_1_0_2; }
		
		//=> (BL => lines+=LineExpression)*
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//BL => lines+=LineExpression
		public Group getGroup_1_0_3_0() { return cGroup_1_0_3_0; }
		
		//BL
		public RuleCall getBLTerminalRuleCall_1_0_3_0_0() { return cBLTerminalRuleCall_1_0_3_0_0; }
		
		//=> lines+=LineExpression
		public Assignment getLinesAssignment_1_0_3_0_1() { return cLinesAssignment_1_0_3_0_1; }
		
		//LineExpression
		public RuleCall getLinesLineExpressionParserRuleCall_1_0_3_0_1_0() { return cLinesLineExpressionParserRuleCall_1_0_3_0_1_0; }
	}
	public class TabSeparationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.TabSeparation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cVerticalLineKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TabSeparation:
		//	'|'? '-' '-'+ ('|' '-' '-'+)+ '|'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'|'? '-' '-'+ ('|' '-' '-'+)+ '|'?
		public Group getGroup() { return cGroup; }
		
		//'|'?
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'-'+
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//('|' '-' '-'+)+
		public Group getGroup_3() { return cGroup_3; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_1() { return cHyphenMinusKeyword_3_1; }
		
		//'-'+
		public Keyword getHyphenMinusKeyword_3_2() { return cHyphenMinusKeyword_3_2; }
		
		//'|'?
		public Keyword getVerticalLineKeyword_4() { return cVerticalLineKeyword_4; }
	}
	public class LineExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.LineExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCellsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCellsNaturalExpressionParserRuleCall_1_0 = (RuleCall)cCellsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCellsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCellsNaturalExpressionParserRuleCall_2_1_0 = (RuleCall)cCellsAssignment_2_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LineExpression:
		//	=> '|'? cells+=NaturalExpression (=> '|' cells+=NaturalExpression)* => '|'?;
		@Override public ParserRule getRule() { return rule; }
		
		//=> '|'? cells+=NaturalExpression (=> '|' cells+=NaturalExpression)* => '|'?
		public Group getGroup() { return cGroup; }
		
		//=> '|'?
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//cells+=NaturalExpression
		public Assignment getCellsAssignment_1() { return cCellsAssignment_1; }
		
		//NaturalExpression
		public RuleCall getCellsNaturalExpressionParserRuleCall_1_0() { return cCellsNaturalExpressionParserRuleCall_1_0; }
		
		//(=> '|' cells+=NaturalExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//=> '|'
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }
		
		//cells+=NaturalExpression
		public Assignment getCellsAssignment_2_1() { return cCellsAssignment_2_1; }
		
		//NaturalExpression
		public RuleCall getCellsNaturalExpressionParserRuleCall_2_1_0() { return cCellsNaturalExpressionParserRuleCall_2_1_0; }
		
		//=> '|'?
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }
	}
	public class RefExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.RefExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRefExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefNameNaturalExpressionParserRuleCall_2_0 = (RuleCall)cRefNameAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRefContentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRefContentNaturalExpressionParserRuleCall_4_0 = (RuleCall)cRefContentAssignment_4.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		///***************************
		// * 
		// * 	Links expressions
		// *	 Image, Ref, Video...
		// *
		// * *********************** */ RefExpression:
		//	{RefExpression}
		//	=> '[' refName=NaturalExpression => ']:' refContent=NaturalExpression? => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{RefExpression} => '[' refName=NaturalExpression => ']:' refContent=NaturalExpression? => BL?
		public Group getGroup() { return cGroup; }
		
		//{RefExpression}
		public Action getRefExpressionAction_0() { return cRefExpressionAction_0; }
		
		//=> '['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//refName=NaturalExpression
		public Assignment getRefNameAssignment_2() { return cRefNameAssignment_2; }
		
		//NaturalExpression
		public RuleCall getRefNameNaturalExpressionParserRuleCall_2_0() { return cRefNameNaturalExpressionParserRuleCall_2_0; }
		
		//=> ']:'
		public Keyword getRightSquareBracketColonKeyword_3() { return cRightSquareBracketColonKeyword_3; }
		
		//refContent=NaturalExpression?
		public Assignment getRefContentAssignment_4() { return cRefContentAssignment_4; }
		
		//NaturalExpression
		public RuleCall getRefContentNaturalExpressionParserRuleCall_4_0() { return cRefContentNaturalExpressionParserRuleCall_4_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_5() { return cBLTerminalRuleCall_5; }
	}
	public class LinkExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.LinkExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLinkExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAltTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAltTextNaturalExpressionParserRuleCall_2_0 = (RuleCall)cAltTextAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLinkContentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLinkContentNaturalExpressionParserRuleCall_4_0 = (RuleCall)cLinkContentAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cBLTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//LinkExpression:
		//	{LinkExpression}
		//	=> '[' altText=NaturalExpression => '](' linkContent=NaturalExpression? => ')' => BL? //|
		//	//=>'[' altText=NaturalExpression =>'][' (refName=NaturalExpression)? =>']' =>BL?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{LinkExpression} => '[' altText=NaturalExpression => '](' linkContent=NaturalExpression? => ')' => BL?
		public Group getGroup() { return cGroup; }
		
		//{LinkExpression}
		public Action getLinkExpressionAction_0() { return cLinkExpressionAction_0; }
		
		//=> '['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//altText=NaturalExpression
		public Assignment getAltTextAssignment_2() { return cAltTextAssignment_2; }
		
		//NaturalExpression
		public RuleCall getAltTextNaturalExpressionParserRuleCall_2_0() { return cAltTextNaturalExpressionParserRuleCall_2_0; }
		
		//=> ']('
		public Keyword getRightSquareBracketLeftParenthesisKeyword_3() { return cRightSquareBracketLeftParenthesisKeyword_3; }
		
		//linkContent=NaturalExpression?
		public Assignment getLinkContentAssignment_4() { return cLinkContentAssignment_4; }
		
		//NaturalExpression
		public RuleCall getLinkContentNaturalExpressionParserRuleCall_4_0() { return cLinkContentNaturalExpressionParserRuleCall_4_0; }
		
		//=> ')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_6() { return cBLTerminalRuleCall_6; }
	}
	public class ImageExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.ImageExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImageExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExclamationMarkLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAltTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAltTextNaturalExpressionParserRuleCall_2_0 = (RuleCall)cAltTextAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLinkContentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLinkContentNaturalExpressionParserRuleCall_4_0 = (RuleCall)cLinkContentAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cBLTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//ImageExpression:
		//	{ImageExpression}
		//	=> '![' altText=NaturalExpression => '](' linkContent=NaturalExpression? => ')' => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ImageExpression} => '![' altText=NaturalExpression => '](' linkContent=NaturalExpression? => ')' => BL?
		public Group getGroup() { return cGroup; }
		
		//{ImageExpression}
		public Action getImageExpressionAction_0() { return cImageExpressionAction_0; }
		
		//=> '!['
		public Keyword getExclamationMarkLeftSquareBracketKeyword_1() { return cExclamationMarkLeftSquareBracketKeyword_1; }
		
		//altText=NaturalExpression
		public Assignment getAltTextAssignment_2() { return cAltTextAssignment_2; }
		
		//NaturalExpression
		public RuleCall getAltTextNaturalExpressionParserRuleCall_2_0() { return cAltTextNaturalExpressionParserRuleCall_2_0; }
		
		//=> ']('
		public Keyword getRightSquareBracketLeftParenthesisKeyword_3() { return cRightSquareBracketLeftParenthesisKeyword_3; }
		
		//linkContent=NaturalExpression?
		public Assignment getLinkContentAssignment_4() { return cLinkContentAssignment_4; }
		
		//NaturalExpression
		public RuleCall getLinkContentNaturalExpressionParserRuleCall_4_0() { return cLinkContentNaturalExpressionParserRuleCall_4_0; }
		
		//=> ')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_6() { return cBLTerminalRuleCall_6; }
	}
	public class VideoExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.VideoExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVideoExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketExclamationMarkLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAltTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAltTextNaturalExpressionParserRuleCall_2_0 = (RuleCall)cAltTextAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLinkImageAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLinkImageNaturalExpressionParserRuleCall_4_0 = (RuleCall)cLinkImageAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisRightSquareBracketLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLinkVideoAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLinkVideoNaturalExpressionParserRuleCall_6_0 = (RuleCall)cLinkVideoAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cBLTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//VideoExpression:
		//	{VideoExpression}
		//	=> '[![' altText=NaturalExpression => '](' linkImage=NaturalExpression? => ')](' linkVideo=NaturalExpression? => ')'
		//	=> BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{VideoExpression} => '[![' altText=NaturalExpression => '](' linkImage=NaturalExpression? => ')]('
		//linkVideo=NaturalExpression? => ')' => BL?
		public Group getGroup() { return cGroup; }
		
		//{VideoExpression}
		public Action getVideoExpressionAction_0() { return cVideoExpressionAction_0; }
		
		//=> '[!['
		public Keyword getLeftSquareBracketExclamationMarkLeftSquareBracketKeyword_1() { return cLeftSquareBracketExclamationMarkLeftSquareBracketKeyword_1; }
		
		//altText=NaturalExpression
		public Assignment getAltTextAssignment_2() { return cAltTextAssignment_2; }
		
		//NaturalExpression
		public RuleCall getAltTextNaturalExpressionParserRuleCall_2_0() { return cAltTextNaturalExpressionParserRuleCall_2_0; }
		
		//=> ']('
		public Keyword getRightSquareBracketLeftParenthesisKeyword_3() { return cRightSquareBracketLeftParenthesisKeyword_3; }
		
		//linkImage=NaturalExpression?
		public Assignment getLinkImageAssignment_4() { return cLinkImageAssignment_4; }
		
		//NaturalExpression
		public RuleCall getLinkImageNaturalExpressionParserRuleCall_4_0() { return cLinkImageNaturalExpressionParserRuleCall_4_0; }
		
		//=> ')]('
		public Keyword getRightParenthesisRightSquareBracketLeftParenthesisKeyword_5() { return cRightParenthesisRightSquareBracketLeftParenthesisKeyword_5; }
		
		//linkVideo=NaturalExpression?
		public Assignment getLinkVideoAssignment_6() { return cLinkVideoAssignment_6; }
		
		//NaturalExpression
		public RuleCall getLinkVideoNaturalExpressionParserRuleCall_6_0() { return cLinkVideoNaturalExpressionParserRuleCall_6_0; }
		
		//=> ')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_8() { return cBLTerminalRuleCall_8; }
	}
	public class HeaderExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.HeaderExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHeader1ExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHeader2ExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHeader3ExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHeader4ExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cHeader5ExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cHeader6ExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		///***************************
		// * 
		// * 	Header expressions
		// *	 From one to six
		// *
		// * *********************** */ HeaderExpression:
		//	Header1Expression | Header2Expression | Header3Expression | Header4Expression | Header5Expression | Header6Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Header1Expression | Header2Expression | Header3Expression | Header4Expression | Header5Expression | Header6Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Header1Expression
		public RuleCall getHeader1ExpressionParserRuleCall_0() { return cHeader1ExpressionParserRuleCall_0; }
		
		//Header2Expression
		public RuleCall getHeader2ExpressionParserRuleCall_1() { return cHeader2ExpressionParserRuleCall_1; }
		
		//Header3Expression
		public RuleCall getHeader3ExpressionParserRuleCall_2() { return cHeader3ExpressionParserRuleCall_2; }
		
		//Header4Expression
		public RuleCall getHeader4ExpressionParserRuleCall_3() { return cHeader4ExpressionParserRuleCall_3; }
		
		//Header5Expression
		public RuleCall getHeader5ExpressionParserRuleCall_4() { return cHeader5ExpressionParserRuleCall_4; }
		
		//Header6Expression
		public RuleCall getHeader6ExpressionParserRuleCall_5() { return cHeader6ExpressionParserRuleCall_5; }
	}
	public class Header1ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Header1Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeader1ExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Header1Expression:
		//	{Header1Expression}
		//	'#' title+=EmphasisExpression => ('#')* => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Header1Expression} '#' title+=EmphasisExpression => ('#')* => BL?
		public Group getGroup() { return cGroup; }
		
		//{Header1Expression}
		public Action getHeader1ExpressionAction_0() { return cHeader1ExpressionAction_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }
		
		//title+=EmphasisExpression
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_2_0() { return cTitleEmphasisExpressionParserRuleCall_2_0; }
		
		//=> ('#')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_4() { return cBLTerminalRuleCall_4; }
	}
	public class Header2ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Header2Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeader2ExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Header2Expression:
		//	{Header2Expression}
		//	'##' title+=EmphasisExpression => ('#')* => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Header2Expression} '##' title+=EmphasisExpression => ('#')* => BL?
		public Group getGroup() { return cGroup; }
		
		//{Header2Expression}
		public Action getHeader2ExpressionAction_0() { return cHeader2ExpressionAction_0; }
		
		//'##'
		public Keyword getNumberSignNumberSignKeyword_1() { return cNumberSignNumberSignKeyword_1; }
		
		//title+=EmphasisExpression
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_2_0() { return cTitleEmphasisExpressionParserRuleCall_2_0; }
		
		//=> ('#')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_4() { return cBLTerminalRuleCall_4; }
	}
	public class Header3ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Header3Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeader3ExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignNumberSignNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Header3Expression:
		//	{Header3Expression}
		//	'###' title+=EmphasisExpression => ('#')* => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Header3Expression} '###' title+=EmphasisExpression => ('#')* => BL?
		public Group getGroup() { return cGroup; }
		
		//{Header3Expression}
		public Action getHeader3ExpressionAction_0() { return cHeader3ExpressionAction_0; }
		
		//'###'
		public Keyword getNumberSignNumberSignNumberSignKeyword_1() { return cNumberSignNumberSignNumberSignKeyword_1; }
		
		//title+=EmphasisExpression
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_2_0() { return cTitleEmphasisExpressionParserRuleCall_2_0; }
		
		//=> ('#')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_4() { return cBLTerminalRuleCall_4; }
	}
	public class Header4ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Header4Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeader4ExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignNumberSignNumberSignNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Header4Expression:
		//	{Header4Expression}
		//	'####' title+=EmphasisExpression => ('#')* => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Header4Expression} '####' title+=EmphasisExpression => ('#')* => BL?
		public Group getGroup() { return cGroup; }
		
		//{Header4Expression}
		public Action getHeader4ExpressionAction_0() { return cHeader4ExpressionAction_0; }
		
		//'####'
		public Keyword getNumberSignNumberSignNumberSignNumberSignKeyword_1() { return cNumberSignNumberSignNumberSignNumberSignKeyword_1; }
		
		//title+=EmphasisExpression
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_2_0() { return cTitleEmphasisExpressionParserRuleCall_2_0; }
		
		//=> ('#')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_4() { return cBLTerminalRuleCall_4; }
	}
	public class Header5ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Header5Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeader5ExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Header5Expression:
		//	{Header5Expression}
		//	'#####' title+=EmphasisExpression => ('#')* => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Header5Expression} '#####' title+=EmphasisExpression => ('#')* => BL?
		public Group getGroup() { return cGroup; }
		
		//{Header5Expression}
		public Action getHeader5ExpressionAction_0() { return cHeader5ExpressionAction_0; }
		
		//'#####'
		public Keyword getNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_1() { return cNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_1; }
		
		//title+=EmphasisExpression
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_2_0() { return cTitleEmphasisExpressionParserRuleCall_2_0; }
		
		//=> ('#')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_4() { return cBLTerminalRuleCall_4; }
	}
	public class Header6ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Header6Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeader6ExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Header6Expression:
		//	{Header6Expression}
		//	'######' title+=EmphasisExpression => ('#')* => BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Header6Expression} '######' title+=EmphasisExpression => ('#')* => BL?
		public Group getGroup() { return cGroup; }
		
		//{Header6Expression}
		public Action getHeader6ExpressionAction_0() { return cHeader6ExpressionAction_0; }
		
		//'######'
		public Keyword getNumberSignNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_1() { return cNumberSignNumberSignNumberSignNumberSignNumberSignNumberSignKeyword_1; }
		
		//title+=EmphasisExpression
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_2_0() { return cTitleEmphasisExpressionParserRuleCall_2_0; }
		
		//=> ('#')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//=> BL?
		public RuleCall getBLTerminalRuleCall_4() { return cBLTerminalRuleCall_4; }
	}
	public class EmphasisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.EmphasisExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cCAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cCStrongExpressionParserRuleCall_0_0_0_0 = (RuleCall)cCAssignment_0_0_0.eContents().get(0);
		private final Assignment cCAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cCItalicExpressionParserRuleCall_0_0_1_0 = (RuleCall)cCAssignment_0_0_1.eContents().get(0);
		private final Assignment cCAssignment_0_0_2 = (Assignment)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cCScratchExpressionParserRuleCall_0_0_2_0 = (RuleCall)cCAssignment_0_0_2.eContents().get(0);
		private final Assignment cCAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCNaturalExpressionParserRuleCall_1_0 = (RuleCall)cCAssignment_1.eContents().get(0);
		
		///***************************
		// * 
		// * 	Emphasis expressions
		// *	 Strong, Italic ...
		// *
		// * *********************** */ EmphasisExpression:
		//	(=> (=> c+=StrongExpression | c+=ItalicExpression | c+=ScratchExpression) | c+=NaturalExpression)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(=> (=> c+=StrongExpression | c+=ItalicExpression | c+=ScratchExpression) | c+=NaturalExpression)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (=> c+=StrongExpression | c+=ItalicExpression | c+=ScratchExpression)
		public Group getGroup_0() { return cGroup_0; }
		
		//=> c+=StrongExpression | c+=ItalicExpression | c+=ScratchExpression
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//=> c+=StrongExpression
		public Assignment getCAssignment_0_0_0() { return cCAssignment_0_0_0; }
		
		//StrongExpression
		public RuleCall getCStrongExpressionParserRuleCall_0_0_0_0() { return cCStrongExpressionParserRuleCall_0_0_0_0; }
		
		//c+=ItalicExpression
		public Assignment getCAssignment_0_0_1() { return cCAssignment_0_0_1; }
		
		//ItalicExpression
		public RuleCall getCItalicExpressionParserRuleCall_0_0_1_0() { return cCItalicExpressionParserRuleCall_0_0_1_0; }
		
		//c+=ScratchExpression
		public Assignment getCAssignment_0_0_2() { return cCAssignment_0_0_2; }
		
		//ScratchExpression
		public RuleCall getCScratchExpressionParserRuleCall_0_0_2_0() { return cCScratchExpressionParserRuleCall_0_0_2_0; }
		
		//c+=NaturalExpression
		public Assignment getCAssignment_1() { return cCAssignment_1; }
		
		//NaturalExpression
		public RuleCall getCNaturalExpressionParserRuleCall_1_0() { return cCNaturalExpressionParserRuleCall_1_0; }
	}
	public class StrongExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.StrongExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStrongExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StrongExpression EmphasisExpression hidden():
		//	{StrongExpression}
		//	'**' content=EmphasisExpression '**';
		@Override public ParserRule getRule() { return rule; }
		
		//{StrongExpression} '**' content=EmphasisExpression '**'
		public Group getGroup() { return cGroup; }
		
		//{StrongExpression}
		public Action getStrongExpressionAction_0() { return cStrongExpressionAction_0; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_1() { return cAsteriskAsteriskKeyword_1; }
		
		//content=EmphasisExpression
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getContentEmphasisExpressionParserRuleCall_2_0() { return cContentEmphasisExpressionParserRuleCall_2_0; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_3() { return cAsteriskAsteriskKeyword_3; }
	}
	public class ItalicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.ItalicExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cItalicExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ItalicExpression EmphasisExpression hidden():
		//	{ItalicExpression}
		//	'*' content=EmphasisExpression '*';
		@Override public ParserRule getRule() { return rule; }
		
		//{ItalicExpression} '*' content=EmphasisExpression '*'
		public Group getGroup() { return cGroup; }
		
		//{ItalicExpression}
		public Action getItalicExpressionAction_0() { return cItalicExpressionAction_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
		
		//content=EmphasisExpression
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getContentEmphasisExpressionParserRuleCall_2_0() { return cContentEmphasisExpressionParserRuleCall_2_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }
	}
	public class ScratchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.ScratchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScratchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTildeTildeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentEmphasisExpressionParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cTildeTildeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ScratchExpression EmphasisExpression hidden():
		//	{ScratchExpression}
		//	'~~' content=EmphasisExpression '~~';
		@Override public ParserRule getRule() { return rule; }
		
		//{ScratchExpression} '~~' content=EmphasisExpression '~~'
		public Group getGroup() { return cGroup; }
		
		//{ScratchExpression}
		public Action getScratchExpressionAction_0() { return cScratchExpressionAction_0; }
		
		//'~~'
		public Keyword getTildeTildeKeyword_1() { return cTildeTildeKeyword_1; }
		
		//content=EmphasisExpression
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//EmphasisExpression
		public RuleCall getContentEmphasisExpressionParserRuleCall_2_0() { return cContentEmphasisExpressionParserRuleCall_2_0; }
		
		//'~~'
		public Keyword getTildeTildeKeyword_3() { return cTildeTildeKeyword_3; }
	}
	public class NaturalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.NaturalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNaturalExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueContentParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NaturalExpression EmphasisExpression:
		//	{NaturalExpression} value+=Content;
		@Override public ParserRule getRule() { return rule; }
		
		//{NaturalExpression} value+=Content
		public Group getGroup() { return cGroup; }
		
		//{NaturalExpression}
		public Action getNaturalExpressionAction_0() { return cNaturalExpressionAction_0; }
		
		//value+=Content
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Content
		public RuleCall getValueContentParserRuleCall_1_0() { return cValueContentParserRuleCall_1_0; }
	}
	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Content");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_0_2 = (RuleCall)cAlternatives_0_0.eContents().get(2);
		private final Keyword cApostropheKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cQuotationMarkKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Content:
		//	=> (ID | STRING | INT) | "\'" | "-" | "|" | '\"';
		@Override public ParserRule getRule() { return rule; }
		
		//=> (ID | STRING | INT) | "\'" | "-" | "|" | '\"'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (ID | STRING | INT)
		public Group getGroup_0() { return cGroup_0; }
		
		//ID | STRING | INT
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0_0() { return cIDTerminalRuleCall_0_0_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_0_1() { return cSTRINGTerminalRuleCall_0_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0_2() { return cINTTerminalRuleCall_0_0_2; }
		
		//"\'"
		public Keyword getApostropheKeyword_1() { return cApostropheKeyword_1; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//"|"
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }
		
		//'\"'
		public Keyword getQuotationMarkKeyword_4() { return cQuotationMarkKeyword_4; }
	}
	
	
	private final FileElements pFile;
	private final ExpressionElements pExpression;
	private final BreakLineExpressionElements pBreakLineExpression;
	private final HorizontalExpressionElements pHorizontalExpression;
	private final TextExpressionElements pTextExpression;
	private final URLedExpressionElements pURLedExpression;
	private final ListExpressionElements pListExpression;
	private final QuoteExpressionElements pQuoteExpression;
	private final TabExpressionElements pTabExpression;
	private final TabSeparationElements pTabSeparation;
	private final LineExpressionElements pLineExpression;
	private final RefExpressionElements pRefExpression;
	private final LinkExpressionElements pLinkExpression;
	private final ImageExpressionElements pImageExpression;
	private final VideoExpressionElements pVideoExpression;
	private final HeaderExpressionElements pHeaderExpression;
	private final Header1ExpressionElements pHeader1Expression;
	private final Header2ExpressionElements pHeader2Expression;
	private final Header3ExpressionElements pHeader3Expression;
	private final Header4ExpressionElements pHeader4Expression;
	private final Header5ExpressionElements pHeader5Expression;
	private final Header6ExpressionElements pHeader6Expression;
	private final EmphasisExpressionElements pEmphasisExpression;
	private final StrongExpressionElements pStrongExpression;
	private final ItalicExpressionElements pItalicExpression;
	private final ScratchExpressionElements pScratchExpression;
	private final NaturalExpressionElements pNaturalExpression;
	private final ContentElements pContent;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tBL;
	private final TerminalRule tWS;
	private final TerminalRule tDIGIT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFile = new FileElements();
		this.pExpression = new ExpressionElements();
		this.pBreakLineExpression = new BreakLineExpressionElements();
		this.pHorizontalExpression = new HorizontalExpressionElements();
		this.pTextExpression = new TextExpressionElements();
		this.pURLedExpression = new URLedExpressionElements();
		this.pListExpression = new ListExpressionElements();
		this.pQuoteExpression = new QuoteExpressionElements();
		this.pTabExpression = new TabExpressionElements();
		this.pTabSeparation = new TabSeparationElements();
		this.pLineExpression = new LineExpressionElements();
		this.pRefExpression = new RefExpressionElements();
		this.pLinkExpression = new LinkExpressionElements();
		this.pImageExpression = new ImageExpressionElements();
		this.pVideoExpression = new VideoExpressionElements();
		this.pHeaderExpression = new HeaderExpressionElements();
		this.pHeader1Expression = new Header1ExpressionElements();
		this.pHeader2Expression = new Header2ExpressionElements();
		this.pHeader3Expression = new Header3ExpressionElements();
		this.pHeader4Expression = new Header4ExpressionElements();
		this.pHeader5Expression = new Header5ExpressionElements();
		this.pHeader6Expression = new Header6ExpressionElements();
		this.pEmphasisExpression = new EmphasisExpressionElements();
		this.pStrongExpression = new StrongExpressionElements();
		this.pItalicExpression = new ItalicExpressionElements();
		this.pScratchExpression = new ScratchExpressionElements();
		this.pNaturalExpression = new NaturalExpressionElements();
		this.pContent = new ContentElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.SL_COMMENT");
		this.tBL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.BL");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.WS");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.DIGIT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("markHammil.mm.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//File:
	//	{File} expression+=Expression*;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//Expression:
	//	=> (c=HeaderExpression | c=BreakLineExpression | c=RefExpression | => c=HorizontalExpression => BL? | c=ListExpression
	//	=> BL?) | c=TextExpression => BL?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//BreakLineExpression:
	//	{BreakLineExpression} BL;
	public BreakLineExpressionElements getBreakLineExpressionAccess() {
		return pBreakLineExpression;
	}
	
	public ParserRule getBreakLineExpressionRule() {
		return getBreakLineExpressionAccess().getRule();
	}
	
	//HorizontalExpression:
	//	{HorizontalExpression} ('-' | '*' | '_') ('-' | '*' | '_') ('-' | '*' | '_')+;
	public HorizontalExpressionElements getHorizontalExpressionAccess() {
		return pHorizontalExpression;
	}
	
	public ParserRule getHorizontalExpressionRule() {
		return getHorizontalExpressionAccess().getRule();
	}
	
	//TextExpression hidden(WS):
	//	=> (=> URLedExpression | TabExpression | QuoteExpression) | EmphasisExpression;
	public TextExpressionElements getTextExpressionAccess() {
		return pTextExpression;
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}
	
	//URLedExpression:
	//	{URLedExpression} (=> (c=ImageExpression | => c=VideoExpression) | c=LinkExpression);
	public URLedExpressionElements getURLedExpressionAccess() {
		return pURLedExpression;
	}
	
	public ParserRule getURLedExpressionRule() {
		return getURLedExpressionAccess().getRule();
	}
	
	//ListExpression hidden():
	//	{ListExpression} (('*' | '-' | '+') WS+ contentUnordered+=TextExpression => BL?)+ | (INT '.' WS+
	//	contentOrdered+=TextExpression => BL?)+;
	public ListExpressionElements getListExpressionAccess() {
		return pListExpression;
	}
	
	public ParserRule getListExpressionRule() {
		return getListExpressionAccess().getRule();
	}
	
	//QuoteExpression:
	//	{QuoteExpression}
	//	=> '>' content+=TextExpression+ => BL?;
	public QuoteExpressionElements getQuoteExpressionAccess() {
		return pQuoteExpression;
	}
	
	public ParserRule getQuoteExpressionRule() {
		return getQuoteExpressionAccess().getRule();
	}
	
	///***************************
	// * 
	// * 	 Tab expressions
	// *	 Lines, Separation...
	// *
	// * *********************** */ TabExpression:
	//	{TabExpression}
	//	=> (header=LineExpression BL TabSeparation => (BL => lines+=LineExpression)*);
	public TabExpressionElements getTabExpressionAccess() {
		return pTabExpression;
	}
	
	public ParserRule getTabExpressionRule() {
		return getTabExpressionAccess().getRule();
	}
	
	//TabSeparation:
	//	'|'? '-' '-'+ ('|' '-' '-'+)+ '|'?;
	public TabSeparationElements getTabSeparationAccess() {
		return pTabSeparation;
	}
	
	public ParserRule getTabSeparationRule() {
		return getTabSeparationAccess().getRule();
	}
	
	//LineExpression:
	//	=> '|'? cells+=NaturalExpression (=> '|' cells+=NaturalExpression)* => '|'?;
	public LineExpressionElements getLineExpressionAccess() {
		return pLineExpression;
	}
	
	public ParserRule getLineExpressionRule() {
		return getLineExpressionAccess().getRule();
	}
	
	///***************************
	// * 
	// * 	Links expressions
	// *	 Image, Ref, Video...
	// *
	// * *********************** */ RefExpression:
	//	{RefExpression}
	//	=> '[' refName=NaturalExpression => ']:' refContent=NaturalExpression? => BL?;
	public RefExpressionElements getRefExpressionAccess() {
		return pRefExpression;
	}
	
	public ParserRule getRefExpressionRule() {
		return getRefExpressionAccess().getRule();
	}
	
	//LinkExpression:
	//	{LinkExpression}
	//	=> '[' altText=NaturalExpression => '](' linkContent=NaturalExpression? => ')' => BL? //|
	//	//=>'[' altText=NaturalExpression =>'][' (refName=NaturalExpression)? =>']' =>BL?
	//;
	public LinkExpressionElements getLinkExpressionAccess() {
		return pLinkExpression;
	}
	
	public ParserRule getLinkExpressionRule() {
		return getLinkExpressionAccess().getRule();
	}
	
	//ImageExpression:
	//	{ImageExpression}
	//	=> '![' altText=NaturalExpression => '](' linkContent=NaturalExpression? => ')' => BL?;
	public ImageExpressionElements getImageExpressionAccess() {
		return pImageExpression;
	}
	
	public ParserRule getImageExpressionRule() {
		return getImageExpressionAccess().getRule();
	}
	
	//VideoExpression:
	//	{VideoExpression}
	//	=> '[![' altText=NaturalExpression => '](' linkImage=NaturalExpression? => ')](' linkVideo=NaturalExpression? => ')'
	//	=> BL?;
	public VideoExpressionElements getVideoExpressionAccess() {
		return pVideoExpression;
	}
	
	public ParserRule getVideoExpressionRule() {
		return getVideoExpressionAccess().getRule();
	}
	
	///***************************
	// * 
	// * 	Header expressions
	// *	 From one to six
	// *
	// * *********************** */ HeaderExpression:
	//	Header1Expression | Header2Expression | Header3Expression | Header4Expression | Header5Expression | Header6Expression;
	public HeaderExpressionElements getHeaderExpressionAccess() {
		return pHeaderExpression;
	}
	
	public ParserRule getHeaderExpressionRule() {
		return getHeaderExpressionAccess().getRule();
	}
	
	//Header1Expression:
	//	{Header1Expression}
	//	'#' title+=EmphasisExpression => ('#')* => BL?;
	public Header1ExpressionElements getHeader1ExpressionAccess() {
		return pHeader1Expression;
	}
	
	public ParserRule getHeader1ExpressionRule() {
		return getHeader1ExpressionAccess().getRule();
	}
	
	//Header2Expression:
	//	{Header2Expression}
	//	'##' title+=EmphasisExpression => ('#')* => BL?;
	public Header2ExpressionElements getHeader2ExpressionAccess() {
		return pHeader2Expression;
	}
	
	public ParserRule getHeader2ExpressionRule() {
		return getHeader2ExpressionAccess().getRule();
	}
	
	//Header3Expression:
	//	{Header3Expression}
	//	'###' title+=EmphasisExpression => ('#')* => BL?;
	public Header3ExpressionElements getHeader3ExpressionAccess() {
		return pHeader3Expression;
	}
	
	public ParserRule getHeader3ExpressionRule() {
		return getHeader3ExpressionAccess().getRule();
	}
	
	//Header4Expression:
	//	{Header4Expression}
	//	'####' title+=EmphasisExpression => ('#')* => BL?;
	public Header4ExpressionElements getHeader4ExpressionAccess() {
		return pHeader4Expression;
	}
	
	public ParserRule getHeader4ExpressionRule() {
		return getHeader4ExpressionAccess().getRule();
	}
	
	//Header5Expression:
	//	{Header5Expression}
	//	'#####' title+=EmphasisExpression => ('#')* => BL?;
	public Header5ExpressionElements getHeader5ExpressionAccess() {
		return pHeader5Expression;
	}
	
	public ParserRule getHeader5ExpressionRule() {
		return getHeader5ExpressionAccess().getRule();
	}
	
	//Header6Expression:
	//	{Header6Expression}
	//	'######' title+=EmphasisExpression => ('#')* => BL?;
	public Header6ExpressionElements getHeader6ExpressionAccess() {
		return pHeader6Expression;
	}
	
	public ParserRule getHeader6ExpressionRule() {
		return getHeader6ExpressionAccess().getRule();
	}
	
	///***************************
	// * 
	// * 	Emphasis expressions
	// *	 Strong, Italic ...
	// *
	// * *********************** */ EmphasisExpression:
	//	(=> (=> c+=StrongExpression | c+=ItalicExpression | c+=ScratchExpression) | c+=NaturalExpression)+;
	public EmphasisExpressionElements getEmphasisExpressionAccess() {
		return pEmphasisExpression;
	}
	
	public ParserRule getEmphasisExpressionRule() {
		return getEmphasisExpressionAccess().getRule();
	}
	
	//StrongExpression EmphasisExpression hidden():
	//	{StrongExpression}
	//	'**' content=EmphasisExpression '**';
	public StrongExpressionElements getStrongExpressionAccess() {
		return pStrongExpression;
	}
	
	public ParserRule getStrongExpressionRule() {
		return getStrongExpressionAccess().getRule();
	}
	
	//ItalicExpression EmphasisExpression hidden():
	//	{ItalicExpression}
	//	'*' content=EmphasisExpression '*';
	public ItalicExpressionElements getItalicExpressionAccess() {
		return pItalicExpression;
	}
	
	public ParserRule getItalicExpressionRule() {
		return getItalicExpressionAccess().getRule();
	}
	
	//ScratchExpression EmphasisExpression hidden():
	//	{ScratchExpression}
	//	'~~' content=EmphasisExpression '~~';
	public ScratchExpressionElements getScratchExpressionAccess() {
		return pScratchExpression;
	}
	
	public ParserRule getScratchExpressionRule() {
		return getScratchExpressionAccess().getRule();
	}
	
	//NaturalExpression EmphasisExpression:
	//	{NaturalExpression} value+=Content;
	public NaturalExpressionElements getNaturalExpressionAccess() {
		return pNaturalExpression;
	}
	
	public ParserRule getNaturalExpressionRule() {
		return getNaturalExpressionAccess().getRule();
	}
	
	//Content:
	//	=> (ID | STRING | INT) | "\'" | "-" | "|" | '\"';
	public ContentElements getContentAccess() {
		return pContent;
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal BL:
	//	'\r'? '\n';
	public TerminalRule getBLRule() {
		return tBL;
	}
	
	//terminal WS:
	//	' ' | '\t';
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
