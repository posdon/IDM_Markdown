/*
 * generated by Xtext 2.12.0
 */
package markHammil.mm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//File:
		//	{File} expression+=Expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//{File} expression+=Expression*
		public Group getGroup() { return cGroup; }
		
		//{File}
		public Action getFileAction_0() { return cFileAction_0; }
		
		//expression+=Expression*
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.Expression");
		private final RuleCall cHeaderExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	HeaderExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//HeaderExpression
		public RuleCall getHeaderExpressionParserRuleCall() { return cHeaderExpressionParserRuleCall; }
	}
	public class HeaderExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.HeaderExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleEmphasisExpressionParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//HeaderExpression Header:
		//	'#' title=EmphasisExpression '#'* BL?;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' title=EmphasisExpression '#'* BL?
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//title=EmphasisExpression
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//EmphasisExpression
		public RuleCall getTitleEmphasisExpressionParserRuleCall_1_0() { return cTitleEmphasisExpressionParserRuleCall_1_0; }
		
		//'#'*
		public Keyword getNumberSignKeyword_2() { return cNumberSignKeyword_2; }
		
		//BL?
		public RuleCall getBLTerminalRuleCall_3() { return cBLTerminalRuleCall_3; }
	}
	public class EmphasisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.EmphasisExpression");
		private final RuleCall cNaturalExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EmphasisExpression:
		//	NaturalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//NaturalExpression
		public RuleCall getNaturalExpressionParserRuleCall() { return cNaturalExpressionParserRuleCall; }
	}
	public class NaturalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.NaturalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmphasisExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NaturalExpression EmphasisExpression:
		//	{EmphasisExpression} value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{EmphasisExpression} value=ID
		public Group getGroup() { return cGroup; }
		
		//{EmphasisExpression}
		public Action getEmphasisExpressionAction_0() { return cEmphasisExpressionAction_0; }
		
		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
	}
	
	
	private final FileElements pFile;
	private final ExpressionElements pExpression;
	private final HeaderExpressionElements pHeaderExpression;
	private final EmphasisExpressionElements pEmphasisExpression;
	private final NaturalExpressionElements pNaturalExpression;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tBL;
	private final TerminalRule tWS;
	private final TerminalRule tDIGIT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFile = new FileElements();
		this.pExpression = new ExpressionElements();
		this.pHeaderExpression = new HeaderExpressionElements();
		this.pEmphasisExpression = new EmphasisExpressionElements();
		this.pNaturalExpression = new NaturalExpressionElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.SL_COMMENT");
		this.tBL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.BL");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.WS");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "markHammil.mm.MyDsl.DIGIT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("markHammil.mm.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//File:
	//	{File} expression+=Expression*;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//Expression:
	//	HeaderExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//HeaderExpression Header:
	//	'#' title=EmphasisExpression '#'* BL?;
	public HeaderExpressionElements getHeaderExpressionAccess() {
		return pHeaderExpression;
	}
	
	public ParserRule getHeaderExpressionRule() {
		return getHeaderExpressionAccess().getRule();
	}
	
	//EmphasisExpression:
	//	NaturalExpression;
	public EmphasisExpressionElements getEmphasisExpressionAccess() {
		return pEmphasisExpression;
	}
	
	public ParserRule getEmphasisExpressionRule() {
		return getEmphasisExpressionAccess().getRule();
	}
	
	//NaturalExpression EmphasisExpression:
	//	{EmphasisExpression} value=ID;
	public NaturalExpressionElements getNaturalExpressionAccess() {
		return pNaturalExpression;
	}
	
	public ParserRule getNaturalExpressionRule() {
		return getNaturalExpressionAccess().getRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal BL:
	//	'\r'? '\n';
	public TerminalRule getBLRule() {
		return tBL;
	}
	
	//terminal WS:
	//	' ' | '\t';
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
