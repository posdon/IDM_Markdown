grammar markHammil.mm.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.mm.markHammil/MyDsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

File:
        {File}
                expression+=Expression*
        ;
        
Expression:
	=> (=> c=HeaderExpression| c=TextExpression =>BL?) | c=BreakLineExpression /*| c=TabExpression =>BL?*/ | c=RefExpression
;

BreakLineExpression :
	{BreakLineExpressionB}
	BL
;

TextExpression:
	c+= EmphasisExpression | => ( c+= QuoteExpression | ( c+=LinkExpression | => c+=ImageExpression | => c+=VideoExpression ) )
;

QuoteExpression returns QuoteExpression:
	{TextExpression}
	=>'>' (content+=TextExpression)+ =>BL?
;

CodeExpression returns CodeExpression:
	{CodeExpression}
	'```' BL (content+=TextExpression =>BL ?)+ '```' BL | '`' content+=TextExpression "`"
	
;

// New
RefExpression returns RefExpression :
	{RefExpression}
	=>'[' refName=NaturalExpression =>']:' (refContent=NaturalExpression)? =>BL?
;

// New
LinkExpression returns LinkExpression :
	{LinkExpression}
	=>'[' altText=NaturalExpression =>'](' (linkContent=NaturalExpression)? =>')' =>BL? |
	=>'[' altText=NaturalExpression =>'][' (refName=NaturalExpression)? =>']' =>BL?
;

// New
ImageExpression returns ImageExpression :
	{ImageExpression}
	=>'![' altText=NaturalExpression =>'](' (linkContent=NaturalExpression)? =>')' =>BL?
;

// New
VideoExpression returns VideoExpression :
	{VideoExpression}
	=>'[![' altText=NaturalExpression =>'](' (linkImage=NaturalExpression)? =>')](' (linkVideo=NaturalExpression)? =>')' =>BL?
;


// New
//TabExpression returns TabExpression :
//	{TabExpression}
//	=> ( header+=LineExpression BL TabSeparation (BL lines+=LineExpression)* )
//;
//
//// New
//TabSeparation :
//	'|'? '-' ('-')+ ( '|' '-' ('-')+ )+ '|'?
//;
//
//// New
//LineExpression returns LineExpression :
//	{LineExpression}
//	'|'? cells+=TextExpression ('|' cells+=TextExpression)* '|'?
//;

HeaderExpression :
	Header1Expression | Header2Expression | Header3Expression | Header4Expression | Header5Expression | Header6Expression
;

Header1Expression returns Header1Expression :
	{Header1Expression}
                '#' title+=EmphasisExpression =>('#')* =>BL ?
        ;
        
Header2Expression returns Header2Expression :
	{Header2Expression}
                '##' title+=EmphasisExpression =>('#')* =>BL ?
        ;
        
Header3Expression returns Header3Expression :
	{Header3Expression}
                '###' title+=EmphasisExpression =>('#')* =>BL ?
        ; 
        
Header4Expression returns Header4Expression :
	{Header4Expression}
                '####' title+=EmphasisExpression =>('#')* =>BL ?
        ;
        
Header5Expression returns Header5Expression :
	{Header5Expression}
                '#####' title+=EmphasisExpression =>('#')* =>BL ?
        ;
        
Header6Expression returns Header6Expression :
	{Header6Expression}
                '######' title+=EmphasisExpression =>('#')* =>BL ?
        ;      
        
EmphasisExpression returns EmphasisExpression:
      ( => ( => c+=StrongExpression | c+=ItalicExpression | c+=ScratchExpression ) | c+=NaturalExpression )+ ;

StrongExpression returns EmphasisExpression hidden():
	{StrongExpression}
	'**' content=EmphasisExpression '**'
;

ItalicExpression returns EmphasisExpression hidden():
	{ItalicExpression}
	'*' content=EmphasisExpression '*'
;

ScratchExpression returns EmphasisExpression hidden():
	{ScratchExpression}
	'~~' content=EmphasisExpression '~~'
;

NaturalExpression returns EmphasisExpression:
        {EmphasisExpression}
                value+=Content ;

Content returns ecore::EString:
	(=>(ID|STRING|INT)|"\'"|"-"|"|"|'\"')
;


terminal STRING
:
'"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"'))* '"' |
"'" ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"'))* "'" ;
terminal ML_COMMENT
: '/*' -> '*/';
terminal SL_COMMENT
: '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal BL: ('\r'? '\n');
terminal WS: (' '|'\t');
terminal fragment DIGIT: '0'..'9';
