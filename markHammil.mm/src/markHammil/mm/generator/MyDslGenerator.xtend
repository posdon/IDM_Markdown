/*
 * generated by Xtext 2.12.0
 */
package markHammil.mm.generator

import java.util.HashMap
import java.util.Map
import markHammil.mm.myDsl.BreakLineExpression
import markHammil.mm.myDsl.EmphasisExpression
import markHammil.mm.myDsl.Expression
import markHammil.mm.myDsl.File
import markHammil.mm.myDsl.Header1Expression
import markHammil.mm.myDsl.Header2Expression
import markHammil.mm.myDsl.Header3Expression
import markHammil.mm.myDsl.Header4Expression
import markHammil.mm.myDsl.Header5Expression
import markHammil.mm.myDsl.Header6Expression
import markHammil.mm.myDsl.HeaderExpression
import markHammil.mm.myDsl.HorizontalExpression
import markHammil.mm.myDsl.ImageExpression
import markHammil.mm.myDsl.ItalicExpression
import markHammil.mm.myDsl.LineExpression
import markHammil.mm.myDsl.LinkExpression
import markHammil.mm.myDsl.ListExpression
import markHammil.mm.myDsl.NaturalExpression
import markHammil.mm.myDsl.QuoteExpression
import markHammil.mm.myDsl.RefExpression
import markHammil.mm.myDsl.ScratchExpression
import markHammil.mm.myDsl.StrongExpression
import markHammil.mm.myDsl.TabExpression
import markHammil.mm.myDsl.TextExpression
import markHammil.mm.myDsl.URLedExpression
import markHammil.mm.myDsl.VideoExpression
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	// Stock all the references
	public Map<String,String> references = new HashMap<String,String>();

	override void doGenerate(Resource res, IFileSystemAccess2 fsa, IGeneratorContext ctx){
	 	fsa.generateFile(res.URI.trimFileExtension.appendFileExtension("html").lastSegment, 
	 	res.allContents.filter(File).toIterable.head.compile.toString)	
	}
	
	def dispatch compile(File file) '''
	<!doctype html>
	<html>
	  <head>
		<meta charset="utf-8">
	    <title>Auto generated markdown</title>
	    <style>
	     table {
	        border-collapse: collapse;
	    }
	    
	    table, th, td {
	        border: 1px solid black;
	    }
	    </style>
	  </head>
	  <body>
		«FOR exp : file.expression»
		«exp.compile»
		«ENDFOR»
	  </body>
	</html>
	'''
	
	def dispatch compile(Expression expression) '''
		«expression.c.compile»
	'''
	
	def dispatch compile(HeaderExpression headerExpression) '''
		Should not be called : «headerExpression»
	'''
		
	def dispatch compile(TextExpression textExpression) '''
		Should not be call : «textExpression»
	'''


	
	def dispatch compile(ListExpression listExpression) '''
	«IF !listExpression.contentOrdered.isEmpty»
	<ol>
		«FOR elem : listExpression.contentOrdered»
		<li>«elem.compile»</li>
		«ENDFOR»
	</ol>
	«ENDIF»
	«IF !listExpression.contentUnordered.isEmpty»
	<ul>
		«FOR elem : listExpression.contentUnordered»
		<li>«elem.compile»</li>
		«ENDFOR»
	</ul>
	«ENDIF»
	'''

	def dispatch compile(QuoteExpression quoteExpression) '''
	<p id="quote">
		«FOR quote : quoteExpression.content»
		«quote.compile»
		«ENDFOR»
	</p>
	'''
	

	
	/***************************
	 * 
	 * 	Singleton expressions
	 *	 br, hr ...
	 *
	 * *********************** */   
	 
	def dispatch compile(BreakLineExpression br) '''
	<br>
	'''
	
	def dispatch compile(HorizontalExpression horizontalExpression) '''
	<hr>
	'''
		
	
	/***************************
	 * 
	 * 	Emphasis expressions
	 *	 strong, italic, scratch...
	 *
	 * *********************** */
	
	def dispatch compile(EmphasisExpression emphasisExpression) '''
	«FOR exp : emphasisExpression.c»
	«exp.compile»
	«ENDFOR»
	''' 
	
	def dispatch compile(StrongExpression stringExpression) '''
	<strong>«stringExpression.content.compile»</strong>
	'''
	
	def dispatch compile(ItalicExpression italicExpression) '''
	<em>«italicExpression.content.compile»</em>
	'''
	
	def dispatch compile(ScratchExpression scratchExpression) '''
	<strike>«scratchExpression.content.compile»</strike>
	'''
	
	def dispatch compile(NaturalExpression naturalExpression)'''
	«FOR value : naturalExpression.value»
	«value.toString»
	«ENDFOR»
	'''
	
	

	/***************************
	 * 
	 * 	Header expressions
	 *	 From one to six
	 *
	 * *********************** */   
 	
	def dispatch compile(Header1Expression headerExpression) '''
		<h1>
			«FOR head : headerExpression.title»
			«head.compile»
			«ENDFOR»
		</h1>
	'''
	
	def dispatch compile(Header2Expression headerExpression) '''
		<h2>
			«FOR head : headerExpression.title»
			«head.compile»
			«ENDFOR»
		</h2>
	'''
	
	def dispatch compile(Header3Expression headerExpression) '''
		<h3>
			«FOR head : headerExpression.title»
			«head.compile»
			«ENDFOR»
		</h3>
	'''
	
	def dispatch compile(Header4Expression headerExpression) '''
		<h4>
			«FOR head : headerExpression.title»
			«head.compile»
			«ENDFOR»
		</h4>
	'''
	
	def dispatch compile(Header5Expression headerExpression) '''
		<h5>
			«FOR head : headerExpression.title»
			«head.compile»
			«ENDFOR»
		</h5>
	'''
	
	def dispatch compile(Header6Expression headerExpression) '''
		<h6>
			«FOR head : headerExpression.title»
			«head.compile»
			«ENDFOR»
		</h6>
	'''
	
	
	
	/***************************
 * 
 * 	 Tab expressions
 *	 Lines, Separation...
 *
 * *********************** */   
	
	def dispatch compile(TabExpression tabExpression) '''
	<table>
		<thead>
			<tr>
				«tabExpression.header.compile»
			</tr>
		</thead>
		<tbody>
			«FOR line : tabExpression.lines»
			<tr>
				«line.compile»
			</tr>
			«ENDFOR»
		</tbody>
	</table>
	'''
	
	def dispatch compile(LineExpression lineExpression) '''
	«FOR cell : lineExpression.cells»
	<td>
		«cell.compile»
	</td>
	«ENDFOR»
	'''



	/***************************
	 * 
	 * 	Links expressions
	 *	 Image, Ref, Video...
	 *
	 * *********************** */   

	def dispatch compile(URLedExpression urlExp) '''
		«urlExp.c.compile»
	'''
	
	// Should add the reference into references map
	def dispatch compile(RefExpression refExpression) {
		references.put(refExpression.refName.compile.toString,refExpression.refContent.compile.toString);
	}
	
	def dispatch compile(LinkExpression linkExpression) '''
	<a href="
	«IF linkExpression.linkContent != null»
	«linkExpression.linkContent.compile»
	«ENDIF»
	«««»»» Should replace the ref by the associated string
	«IF linkExpression.refName != null»
	«IF references.get(linkExpression.refName.toString) != null»
	references.get(linkExpression.refName.toString)
	«ELSE»
	linkExpression.refName.toString
	«ENDIF»
	«ENDIF»
	">«linkExpression.altText.compile»</a>
	'''
	
	def dispatch compile(ImageExpression imageExpression) '''
	<img src="«imageExpression.linkContent.compile»">«imageExpression.altText.compile»</img>
	'''
	
	def dispatch compile(VideoExpression videoExpression) '''
	
	'''
	
}
